/*
 * motor.c
 *
 *  Created on: Feb 25, 2020
 *      Author: xkacejs
 */


#include "motor.h"


void MOTOR_ControllerReset(PID_CONTROLLER* pid){


	pid->E = 0;
	pid->E_Prev = 0;
	pid->E_Sum = 0;

	pid->W = 0;
	pid->FB = 0;
	pid->U = 0;

	pid->b = 1;
	pid->c = 1;
	pid->uPrevTime = MAIN_GetMicros();
	pid->feedfwd_1order_Integrator = 0;



}
void MOTOR_INIT(){
	// set structure of controllers

	// output is required current
	MOTOR_ControllerReset(&MOTOR_currentController[MOTOR_ML]);
	MOTOR_currentController[MOTOR_ML].Tx =0;
	MOTOR_currentController[MOTOR_ML].maxU = +1;
	MOTOR_currentController[MOTOR_ML].minU = -1;

	MOTOR_ControllerReset(&MOTOR_currentController[MOTOR_MR]);
	MOTOR_currentController[MOTOR_MR].Tx = 0;
	MOTOR_currentController[MOTOR_MR].maxU = +1;
	MOTOR_currentController[MOTOR_MR].minU = -1;

	// output is requred moment
	MOTOR_ControllerReset(&MOTOR_velocityController[MOTOR_ML]);
	MOTOR_velocityController[MOTOR_ML].Tx = 0;
	MOTOR_velocityController[MOTOR_ML].maxU = +0.005;
	MOTOR_velocityController[MOTOR_ML].minU = -0.005;

	MOTOR_ControllerReset(&MOTOR_velocityController[MOTOR_MR]);
	MOTOR_velocityController[MOTOR_MR].Tx = 0;
	MOTOR_velocityController[MOTOR_MR].maxU = +0.005;
	MOTOR_velocityController[MOTOR_MR].minU = -0.005;

}

void MOTOR_ControllerSet( PID_CONTROLLER* pid,\
			float P, float I, float D){
	MOTOR_ControllerReset(pid);
	pid->P = P;
	pid->I = I;
	pid->D = D;
	pid->E_Sum = 0;
}


volatile float MOTOR_ControllerUpdate( PID_CONTROLLER* pid, float requiredValue, float feedback, uint32_t uTime){
	// return is otuput of PID

	// dt
	const float dt 	= 2.5e-3;//(uTime - pid->uPrevTime)*1e-6;
	pid->uPrevTime = uTime;

	//feedforward
	pid->U = pid->feedfwd_1order_K * (requiredValue - pid->feedfwd_1order_Integrator);
	pid->feedfwd_1order_Integrator = pid->feedfwd_1order_T * (pid->U)*dt; // U/W = K/(T*s+1)
	pid->U += pid->feedfwd_0order_K * requiredValue;


	//inputs
	pid->W	= requiredValue;
	pid->FB = feedback;
	pid->E  = requiredValue - feedback;


	// pid coeficients
	const float eP 	= pid->b*requiredValue - feedback;
	const float eD	= pid->c*requiredValue - feedback;
	pid->E_Sum = pid->E_Sum + pid->E *dt;

	// Output
	pid->U += pid->P*eP + pid->I*pid->E_Sum + pid->D*(eD - pid->E_Prev)/dt;
	pid->E_Prev = eD;

	// antiwind-up
	if( pid->U > pid->maxU ) {
		pid->E_Sum += (pid->maxU-pid->U)*pid->Tx;
		pid->U = pid->maxU;
	}else if( pid->U < pid->minU ){
		pid->E_Sum += (pid->minU-pid->U)*pid->Tx;
		pid->U = pid->minU;
	}

	return pid->U;




}

void MOTOR_SetVoltage(uint8_t motorSelect, float duty){
	// left motor = 0 ; right motor = 1
	// duty <-1; 1>

	// get absolute value
	float pwm = (duty <0)? -duty : duty;
	pwm = (pwm>0.99)? 0.99:pwm;
	// In duty 100% will driver get stucked in OC protection


	// set direction
	if(motorSelect == MOTOR_ML){
		// left
		if(duty <0)
			HAL_GPIO_WritePin(MOTOR_ML_DIR_PORT, MOTOR_ML_DIR_PIN, GPIO_PIN_RESET);
		else
			HAL_GPIO_WritePin(MOTOR_ML_DIR_PORT, MOTOR_ML_DIR_PIN, GPIO_PIN_SET);

	}else{
		// right

		if(duty <0)
			HAL_GPIO_WritePin(MOTOR_MR_DIR_PORT, MOTOR_MR_DIR_PIN, GPIO_PIN_SET);
		else
			HAL_GPIO_WritePin(MOTOR_MR_DIR_PORT, MOTOR_MR_DIR_PIN, GPIO_PIN_RESET);

	}


	// set pwm;
	ACTUATOR_MotorSetPWM(motorSelect, pwm);
}

int MOTOR_GetCurrentSign(uint8_t motorSelect){

	// returns signum +/-
	if(motorSelect == MOTOR_ML){
			// left

			const uint8_t state = HAL_GPIO_ReadPin(MOTOR_ML_DIR_PORT, MOTOR_ML_DIR_PIN);
			return (state==0)? -1: +1;

		}else{
			// right

			const uint8_t state = HAL_GPIO_ReadPin(MOTOR_MR_DIR_PORT, MOTOR_MR_DIR_PIN);
			return (state==0)? 1: -1;

		}

}
void MOTOR_SetMoment(uint8_t motorSelect, float requiredMoment ){
	// required Torque is in Nm

	const float requiredCurrent = requiredMoment*MOTOR_CONST_M_I;// unit is A

	float measuredCurrent; // mA
	const uint8_t filtCoeficient = 3;

	// because of filter, needs separate static
	if(motorSelect == MOTOR_ML){

		static int16_t currentL_prev = 0;
		const int16_t current = ((int)SENSORS_motorI[motorSelect])*MOTOR_GetCurrentSign(motorSelect);
		currentL_prev =currentL_prev + (current-currentL_prev)/ filtCoeficient;
		measuredCurrent = (float) currentL_prev;
	}else{
		static int16_t currentR_prev = 0;
		const int16_t current = ((int)SENSORS_motorI[motorSelect])*MOTOR_GetCurrentSign(motorSelect);
		currentR_prev = currentR_prev + (current-currentR_prev)/ filtCoeficient;
		measuredCurrent = (float) currentR_prev;
	}



	float tmpU = MOTOR_ControllerUpdate(&MOTOR_currentController[motorSelect], requiredCurrent,\
			measuredCurrent/1000.0, MAIN_GetMicros());	// mA->A

	//tmpU = (abs(tmpU)>0.001)? tmpU : 0;
	tmpU = (((tmpU>0)?tmpU:-tmpU)>0.001)? tmpU : 0;
	MOTOR_SetVoltage(motorSelect, tmpU);


}

void MOTOR_SetVelocity(uint8_t motorSelect, float requiredVelocity){

	// TODO ADAPTIVE Controller

	MOTOR_ControllerUpdate(&MOTOR_velocityController[motorSelect], \
			requiredVelocity, SENSORS_velocity[motorSelect], \
			MAIN_GetMicros());

	/*
	if(requiredVelocity == 0 ){
		MOTOR_velocityController[motorSelect].U = 0;
	}
	*/

	MOTOR_SetMoment(motorSelect, MOTOR_velocityController[motorSelect].U);

	//TOTO TU PADA ten printf
	/*if(motorSelect = 1)
	printf(" %i,\t %.2f, \t %.2f, \t %.2f, \t %.2f, \t %.2f\n\r",\
				MAIN_GetMicros()/1000, requiredVelocity,  MOTOR_velocityController[0].FB,\
				 MOTOR_velocityController[0].U*1000, MOTOR_currentController[0].FB*1000,\
				 MOTOR_currentController[0].U);
*/
	//MOTOR_SetVoltage(motorSelect, MOTOR_velocityController[motorSelect].U);

}

