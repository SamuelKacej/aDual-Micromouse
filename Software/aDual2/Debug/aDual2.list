
aDual2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005994  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005b1c  08005b1c  00015b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c54  08005c54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c54  08005c54  00015c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c5c  08005c5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c5c  08005c5c  00015c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c60  08005c60  00015c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041ac  2000000c  08005c70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200041b8  08005c70  000241b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef9f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000233b  00000000  00000000  0002efdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af8  00000000  00000000  00031318  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c0  00000000  00000000  00031e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002038b  00000000  00000000  000327d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b8bd  00000000  00000000  00052b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ba994  00000000  00000000  0005e418  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00118dac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aec  00000000  00000000  00118e28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b04 	.word	0x08005b04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005b04 	.word	0x08005b04

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f92f 	bl	8000754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f005 fa34 	bl	8005968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f939 	bl	80007a2 <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f90f 	bl	800076a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	2000005c 	.word	0x2000005c

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	2000005c 	.word	0x2000005c

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	db0a      	blt.n	800067e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	b2da      	uxtb	r2, r3
 800066c:	490c      	ldr	r1, [pc, #48]	; (80006a0 <__NVIC_SetPriority+0x4c>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	0112      	lsls	r2, r2, #4
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	440b      	add	r3, r1
 8000678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800067c:	e00a      	b.n	8000694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4908      	ldr	r1, [pc, #32]	; (80006a4 <__NVIC_SetPriority+0x50>)
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	f003 030f 	and.w	r3, r3, #15
 800068a:	3b04      	subs	r3, #4
 800068c:	0112      	lsls	r2, r2, #4
 800068e:	b2d2      	uxtb	r2, r2
 8000690:	440b      	add	r3, r1
 8000692:	761a      	strb	r2, [r3, #24]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000e100 	.word	0xe000e100
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b089      	sub	sp, #36	; 0x24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	f1c3 0307 	rsb	r3, r3, #7
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	bf28      	it	cs
 80006c6:	2304      	movcs	r3, #4
 80006c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3304      	adds	r3, #4
 80006ce:	2b06      	cmp	r3, #6
 80006d0:	d902      	bls.n	80006d8 <NVIC_EncodePriority+0x30>
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3b03      	subs	r3, #3
 80006d6:	e000      	b.n	80006da <NVIC_EncodePriority+0x32>
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	f04f 32ff 	mov.w	r2, #4294967295
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	43da      	mvns	r2, r3
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	401a      	ands	r2, r3
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	f04f 31ff 	mov.w	r1, #4294967295
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	43d9      	mvns	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	4313      	orrs	r3, r2
         );
}
 8000702:	4618      	mov	r0, r3
 8000704:	3724      	adds	r7, #36	; 0x24
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3b01      	subs	r3, #1
 800071c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000720:	d301      	bcc.n	8000726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000722:	2301      	movs	r3, #1
 8000724:	e00f      	b.n	8000746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <SysTick_Config+0x40>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072e:	210f      	movs	r1, #15
 8000730:	f04f 30ff 	mov.w	r0, #4294967295
 8000734:	f7ff ff8e 	bl	8000654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <SysTick_Config+0x40>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <SysTick_Config+0x40>)
 8000740:	2207      	movs	r2, #7
 8000742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	e000e010 	.word	0xe000e010

08000754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff47 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076a:	b580      	push	{r7, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800077c:	f7ff ff5c 	bl	8000638 <__NVIC_GetPriorityGrouping>
 8000780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	68b9      	ldr	r1, [r7, #8]
 8000786:	6978      	ldr	r0, [r7, #20]
 8000788:	f7ff ff8e 	bl	80006a8 <NVIC_EncodePriority>
 800078c:	4602      	mov	r2, r0
 800078e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000792:	4611      	mov	r1, r2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff5d 	bl	8000654 <__NVIC_SetPriority>
}
 800079a:	bf00      	nop
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ffb0 	bl	8000710 <SysTick_Config>
 80007b0:	4603      	mov	r3, r0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007bc:	b480      	push	{r7}
 80007be:	b089      	sub	sp, #36	; 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
 80007d6:	e16b      	b.n	8000ab0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007d8:	2201      	movs	r2, #1
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	697a      	ldr	r2, [r7, #20]
 80007e8:	4013      	ands	r3, r2
 80007ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	f040 815a 	bne.w	8000aaa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d00b      	beq.n	8000816 <HAL_GPIO_Init+0x5a>
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	2b02      	cmp	r3, #2
 8000804:	d007      	beq.n	8000816 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800080a:	2b11      	cmp	r3, #17
 800080c:	d003      	beq.n	8000816 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2b12      	cmp	r3, #18
 8000814:	d130      	bne.n	8000878 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	2203      	movs	r2, #3
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	43db      	mvns	r3, r3
 8000828:	69ba      	ldr	r2, [r7, #24]
 800082a:	4013      	ands	r3, r2
 800082c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	68da      	ldr	r2, [r3, #12]
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	4313      	orrs	r3, r2
 800083e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	69ba      	ldr	r2, [r7, #24]
 8000844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800084c:	2201      	movs	r2, #1
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	43db      	mvns	r3, r3
 8000856:	69ba      	ldr	r2, [r7, #24]
 8000858:	4013      	ands	r3, r2
 800085a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	091b      	lsrs	r3, r3, #4
 8000862:	f003 0201 	and.w	r2, r3, #1
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	69ba      	ldr	r2, [r7, #24]
 800086e:	4313      	orrs	r3, r2
 8000870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	69ba      	ldr	r2, [r7, #24]
 8000876:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	2203      	movs	r2, #3
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	4013      	ands	r3, r2
 800088e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	4313      	orrs	r3, r2
 80008a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d003      	beq.n	80008b8 <HAL_GPIO_Init+0xfc>
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	2b12      	cmp	r3, #18
 80008b6:	d123      	bne.n	8000900 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	08da      	lsrs	r2, r3, #3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3208      	adds	r2, #8
 80008c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	f003 0307 	and.w	r3, r3, #7
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	220f      	movs	r2, #15
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	4013      	ands	r3, r2
 80008da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	691a      	ldr	r2, [r3, #16]
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	08da      	lsrs	r2, r3, #3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3208      	adds	r2, #8
 80008fa:	69b9      	ldr	r1, [r7, #24]
 80008fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	2203      	movs	r2, #3
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4013      	ands	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 0203 	and.w	r2, r3, #3
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4313      	orrs	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093c:	2b00      	cmp	r3, #0
 800093e:	f000 80b4 	beq.w	8000aaa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b5f      	ldr	r3, [pc, #380]	; (8000ac4 <HAL_GPIO_Init+0x308>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a5e      	ldr	r2, [pc, #376]	; (8000ac4 <HAL_GPIO_Init+0x308>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
 8000952:	4b5c      	ldr	r3, [pc, #368]	; (8000ac4 <HAL_GPIO_Init+0x308>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800095e:	4a5a      	ldr	r2, [pc, #360]	; (8000ac8 <HAL_GPIO_Init+0x30c>)
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	3302      	adds	r3, #2
 8000966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	f003 0303 	and.w	r3, r3, #3
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	220f      	movs	r2, #15
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	4013      	ands	r3, r2
 8000980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a51      	ldr	r2, [pc, #324]	; (8000acc <HAL_GPIO_Init+0x310>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d02b      	beq.n	80009e2 <HAL_GPIO_Init+0x226>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a50      	ldr	r2, [pc, #320]	; (8000ad0 <HAL_GPIO_Init+0x314>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d025      	beq.n	80009de <HAL_GPIO_Init+0x222>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a4f      	ldr	r2, [pc, #316]	; (8000ad4 <HAL_GPIO_Init+0x318>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d01f      	beq.n	80009da <HAL_GPIO_Init+0x21e>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a4e      	ldr	r2, [pc, #312]	; (8000ad8 <HAL_GPIO_Init+0x31c>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d019      	beq.n	80009d6 <HAL_GPIO_Init+0x21a>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a4d      	ldr	r2, [pc, #308]	; (8000adc <HAL_GPIO_Init+0x320>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d013      	beq.n	80009d2 <HAL_GPIO_Init+0x216>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a4c      	ldr	r2, [pc, #304]	; (8000ae0 <HAL_GPIO_Init+0x324>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d00d      	beq.n	80009ce <HAL_GPIO_Init+0x212>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a4b      	ldr	r2, [pc, #300]	; (8000ae4 <HAL_GPIO_Init+0x328>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d007      	beq.n	80009ca <HAL_GPIO_Init+0x20e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a4a      	ldr	r2, [pc, #296]	; (8000ae8 <HAL_GPIO_Init+0x32c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d101      	bne.n	80009c6 <HAL_GPIO_Init+0x20a>
 80009c2:	2307      	movs	r3, #7
 80009c4:	e00e      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009c6:	2308      	movs	r3, #8
 80009c8:	e00c      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009ca:	2306      	movs	r3, #6
 80009cc:	e00a      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009ce:	2305      	movs	r3, #5
 80009d0:	e008      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009d2:	2304      	movs	r3, #4
 80009d4:	e006      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009d6:	2303      	movs	r3, #3
 80009d8:	e004      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009da:	2302      	movs	r3, #2
 80009dc:	e002      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009e2:	2300      	movs	r3, #0
 80009e4:	69fa      	ldr	r2, [r7, #28]
 80009e6:	f002 0203 	and.w	r2, r2, #3
 80009ea:	0092      	lsls	r2, r2, #2
 80009ec:	4093      	lsls	r3, r2
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009f4:	4934      	ldr	r1, [pc, #208]	; (8000ac8 <HAL_GPIO_Init+0x30c>)
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a02:	4b3a      	ldr	r3, [pc, #232]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d003      	beq.n	8000a26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a26:	4a31      	ldr	r2, [pc, #196]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a2c:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d003      	beq.n	8000a50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a50:	4a26      	ldr	r2, [pc, #152]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a56:	4b25      	ldr	r3, [pc, #148]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	4013      	ands	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aa4:	4a11      	ldr	r2, [pc, #68]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3301      	adds	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	2b0f      	cmp	r3, #15
 8000ab4:	f67f ae90 	bls.w	80007d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3724      	adds	r7, #36	; 0x24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40013800 	.word	0x40013800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40021400 	.word	0x40021400
 8000ae4:	40021800 	.word	0x40021800
 8000ae8:	40021c00 	.word	0x40021c00
 8000aec:	40013c00 	.word	0x40013c00

08000af0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	691a      	ldr	r2, [r3, #16]
 8000b00:	887b      	ldrh	r3, [r7, #2]
 8000b02:	4013      	ands	r3, r2
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d002      	beq.n	8000b0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]
 8000b0c:	e001      	b.n	8000b12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	807b      	strh	r3, [r7, #2]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b30:	787b      	ldrb	r3, [r7, #1]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b36:	887a      	ldrh	r2, [r7, #2]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b3c:	e003      	b.n	8000b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	041a      	lsls	r2, r3, #16
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	619a      	str	r2, [r3, #24]
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e25b      	b.n	800101e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d075      	beq.n	8000c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b72:	4ba3      	ldr	r3, [pc, #652]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f003 030c 	and.w	r3, r3, #12
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	d00c      	beq.n	8000b98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b7e:	4ba0      	ldr	r3, [pc, #640]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b86:	2b08      	cmp	r3, #8
 8000b88:	d112      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b8a:	4b9d      	ldr	r3, [pc, #628]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b96:	d10b      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b98:	4b99      	ldr	r3, [pc, #612]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d05b      	beq.n	8000c5c <HAL_RCC_OscConfig+0x108>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d157      	bne.n	8000c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	e236      	b.n	800101e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb8:	d106      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x74>
 8000bba:	4b91      	ldr	r3, [pc, #580]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a90      	ldr	r2, [pc, #576]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc4:	6013      	str	r3, [r2, #0]
 8000bc6:	e01d      	b.n	8000c04 <HAL_RCC_OscConfig+0xb0>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bd0:	d10c      	bne.n	8000bec <HAL_RCC_OscConfig+0x98>
 8000bd2:	4b8b      	ldr	r3, [pc, #556]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a8a      	ldr	r2, [pc, #552]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	4b88      	ldr	r3, [pc, #544]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a87      	ldr	r2, [pc, #540]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	e00b      	b.n	8000c04 <HAL_RCC_OscConfig+0xb0>
 8000bec:	4b84      	ldr	r3, [pc, #528]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a83      	ldr	r2, [pc, #524]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	4b81      	ldr	r3, [pc, #516]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a80      	ldr	r2, [pc, #512]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d013      	beq.n	8000c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c0c:	f7ff fcc2 	bl	8000594 <HAL_GetTick>
 8000c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c12:	e008      	b.n	8000c26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c14:	f7ff fcbe 	bl	8000594 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	2b64      	cmp	r3, #100	; 0x64
 8000c20:	d901      	bls.n	8000c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c22:	2303      	movs	r3, #3
 8000c24:	e1fb      	b.n	800101e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c26:	4b76      	ldr	r3, [pc, #472]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f0      	beq.n	8000c14 <HAL_RCC_OscConfig+0xc0>
 8000c32:	e014      	b.n	8000c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c34:	f7ff fcae 	bl	8000594 <HAL_GetTick>
 8000c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c3a:	e008      	b.n	8000c4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c3c:	f7ff fcaa 	bl	8000594 <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	2b64      	cmp	r3, #100	; 0x64
 8000c48:	d901      	bls.n	8000c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e1e7      	b.n	800101e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c4e:	4b6c      	ldr	r3, [pc, #432]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1f0      	bne.n	8000c3c <HAL_RCC_OscConfig+0xe8>
 8000c5a:	e000      	b.n	8000c5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d063      	beq.n	8000d32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c6a:	4b65      	ldr	r3, [pc, #404]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	f003 030c 	and.w	r3, r3, #12
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00b      	beq.n	8000c8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c76:	4b62      	ldr	r3, [pc, #392]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c7e:	2b08      	cmp	r3, #8
 8000c80:	d11c      	bne.n	8000cbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c82:	4b5f      	ldr	r3, [pc, #380]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d116      	bne.n	8000cbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8e:	4b5c      	ldr	r3, [pc, #368]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d005      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x152>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d001      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e1bb      	b.n	800101e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca6:	4b56      	ldr	r3, [pc, #344]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	4952      	ldr	r1, [pc, #328]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cba:	e03a      	b.n	8000d32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d020      	beq.n	8000d06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cc4:	4b4f      	ldr	r3, [pc, #316]	; (8000e04 <HAL_RCC_OscConfig+0x2b0>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cca:	f7ff fc63 	bl	8000594 <HAL_GetTick>
 8000cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd0:	e008      	b.n	8000ce4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd2:	f7ff fc5f 	bl	8000594 <HAL_GetTick>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d901      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e19c      	b.n	800101e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce4:	4b46      	ldr	r3, [pc, #280]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d0f0      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf0:	4b43      	ldr	r3, [pc, #268]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	691b      	ldr	r3, [r3, #16]
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	4940      	ldr	r1, [pc, #256]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000d00:	4313      	orrs	r3, r2
 8000d02:	600b      	str	r3, [r1, #0]
 8000d04:	e015      	b.n	8000d32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d06:	4b3f      	ldr	r3, [pc, #252]	; (8000e04 <HAL_RCC_OscConfig+0x2b0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d0c:	f7ff fc42 	bl	8000594 <HAL_GetTick>
 8000d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d14:	f7ff fc3e 	bl	8000594 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e17b      	b.n	800101e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d26:	4b36      	ldr	r3, [pc, #216]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1f0      	bne.n	8000d14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d030      	beq.n	8000da0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d016      	beq.n	8000d74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d46:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <HAL_RCC_OscConfig+0x2b4>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d4c:	f7ff fc22 	bl	8000594 <HAL_GetTick>
 8000d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d54:	f7ff fc1e 	bl	8000594 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e15b      	b.n	800101e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d66:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f0      	beq.n	8000d54 <HAL_RCC_OscConfig+0x200>
 8000d72:	e015      	b.n	8000da0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d74:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <HAL_RCC_OscConfig+0x2b4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7a:	f7ff fc0b 	bl	8000594 <HAL_GetTick>
 8000d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d80:	e008      	b.n	8000d94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d82:	f7ff fc07 	bl	8000594 <HAL_GetTick>
 8000d86:	4602      	mov	r2, r0
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d901      	bls.n	8000d94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d90:	2303      	movs	r3, #3
 8000d92:	e144      	b.n	800101e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1f0      	bne.n	8000d82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f000 80a0 	beq.w	8000eee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10f      	bne.n	8000dde <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <HAL_RCC_OscConfig+0x2ac>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_RCC_OscConfig+0x2b8>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d121      	bne.n	8000e2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_RCC_OscConfig+0x2b8>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_RCC_OscConfig+0x2b8>)
 8000df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000df6:	f7ff fbcd 	bl	8000594 <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dfc:	e011      	b.n	8000e22 <HAL_RCC_OscConfig+0x2ce>
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800
 8000e04:	42470000 	.word	0x42470000
 8000e08:	42470e80 	.word	0x42470e80
 8000e0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e10:	f7ff fbc0 	bl	8000594 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e0fd      	b.n	800101e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e22:	4b81      	ldr	r3, [pc, #516]	; (8001028 <HAL_RCC_OscConfig+0x4d4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f0      	beq.n	8000e10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d106      	bne.n	8000e44 <HAL_RCC_OscConfig+0x2f0>
 8000e36:	4b7d      	ldr	r3, [pc, #500]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e3a:	4a7c      	ldr	r2, [pc, #496]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6713      	str	r3, [r2, #112]	; 0x70
 8000e42:	e01c      	b.n	8000e7e <HAL_RCC_OscConfig+0x32a>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	2b05      	cmp	r3, #5
 8000e4a:	d10c      	bne.n	8000e66 <HAL_RCC_OscConfig+0x312>
 8000e4c:	4b77      	ldr	r3, [pc, #476]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e50:	4a76      	ldr	r2, [pc, #472]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	6713      	str	r3, [r2, #112]	; 0x70
 8000e58:	4b74      	ldr	r3, [pc, #464]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e5c:	4a73      	ldr	r2, [pc, #460]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6713      	str	r3, [r2, #112]	; 0x70
 8000e64:	e00b      	b.n	8000e7e <HAL_RCC_OscConfig+0x32a>
 8000e66:	4b71      	ldr	r3, [pc, #452]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e6a:	4a70      	ldr	r2, [pc, #448]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000e6c:	f023 0301 	bic.w	r3, r3, #1
 8000e70:	6713      	str	r3, [r2, #112]	; 0x70
 8000e72:	4b6e      	ldr	r3, [pc, #440]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e76:	4a6d      	ldr	r2, [pc, #436]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000e78:	f023 0304 	bic.w	r3, r3, #4
 8000e7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d015      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e86:	f7ff fb85 	bl	8000594 <HAL_GetTick>
 8000e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e8c:	e00a      	b.n	8000ea4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e8e:	f7ff fb81 	bl	8000594 <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d901      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e0bc      	b.n	800101e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea4:	4b61      	ldr	r3, [pc, #388]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0ee      	beq.n	8000e8e <HAL_RCC_OscConfig+0x33a>
 8000eb0:	e014      	b.n	8000edc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb2:	f7ff fb6f 	bl	8000594 <HAL_GetTick>
 8000eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eb8:	e00a      	b.n	8000ed0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eba:	f7ff fb6b 	bl	8000594 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d901      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e0a6      	b.n	800101e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed0:	4b56      	ldr	r3, [pc, #344]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1ee      	bne.n	8000eba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000edc:	7dfb      	ldrb	r3, [r7, #23]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d105      	bne.n	8000eee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ee2:	4b52      	ldr	r3, [pc, #328]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a51      	ldr	r2, [pc, #324]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 8092 	beq.w	800101c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ef8:	4b4c      	ldr	r3, [pc, #304]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f003 030c 	and.w	r3, r3, #12
 8000f00:	2b08      	cmp	r3, #8
 8000f02:	d05c      	beq.n	8000fbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d141      	bne.n	8000f90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f0c:	4b48      	ldr	r3, [pc, #288]	; (8001030 <HAL_RCC_OscConfig+0x4dc>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f12:	f7ff fb3f 	bl	8000594 <HAL_GetTick>
 8000f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f18:	e008      	b.n	8000f2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f1a:	f7ff fb3b 	bl	8000594 <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d901      	bls.n	8000f2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e078      	b.n	800101e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f2c:	4b3f      	ldr	r3, [pc, #252]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f0      	bne.n	8000f1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69da      	ldr	r2, [r3, #28]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f46:	019b      	lsls	r3, r3, #6
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4e:	085b      	lsrs	r3, r3, #1
 8000f50:	3b01      	subs	r3, #1
 8000f52:	041b      	lsls	r3, r3, #16
 8000f54:	431a      	orrs	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5a:	061b      	lsls	r3, r3, #24
 8000f5c:	4933      	ldr	r1, [pc, #204]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f62:	4b33      	ldr	r3, [pc, #204]	; (8001030 <HAL_RCC_OscConfig+0x4dc>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fb14 	bl	8000594 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f70:	f7ff fb10 	bl	8000594 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e04d      	b.n	800101e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f82:	4b2a      	ldr	r3, [pc, #168]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f0      	beq.n	8000f70 <HAL_RCC_OscConfig+0x41c>
 8000f8e:	e045      	b.n	800101c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <HAL_RCC_OscConfig+0x4dc>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f96:	f7ff fafd 	bl	8000594 <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f9e:	f7ff faf9 	bl	8000594 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e036      	b.n	800101e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1f0      	bne.n	8000f9e <HAL_RCC_OscConfig+0x44a>
 8000fbc:	e02e      	b.n	800101c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d101      	bne.n	8000fca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e029      	b.n	800101e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_RCC_OscConfig+0x4d8>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d11c      	bne.n	8001018 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d115      	bne.n	8001018 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d10d      	bne.n	8001018 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001006:	429a      	cmp	r2, r3
 8001008:	d106      	bne.n	8001018 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001014:	429a      	cmp	r2, r3
 8001016:	d001      	beq.n	800101c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40007000 	.word	0x40007000
 800102c:	40023800 	.word	0x40023800
 8001030:	42470060 	.word	0x42470060

08001034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e0cc      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001048:	4b68      	ldr	r3, [pc, #416]	; (80011ec <HAL_RCC_ClockConfig+0x1b8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 030f 	and.w	r3, r3, #15
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d90c      	bls.n	8001070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001056:	4b65      	ldr	r3, [pc, #404]	; (80011ec <HAL_RCC_ClockConfig+0x1b8>)
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800105e:	4b63      	ldr	r3, [pc, #396]	; (80011ec <HAL_RCC_ClockConfig+0x1b8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	429a      	cmp	r2, r3
 800106a:	d001      	beq.n	8001070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e0b8      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d020      	beq.n	80010be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	2b00      	cmp	r3, #0
 8001086:	d005      	beq.n	8001094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001088:	4b59      	ldr	r3, [pc, #356]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	4a58      	ldr	r2, [pc, #352]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 800108e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001092:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010a0:	4b53      	ldr	r3, [pc, #332]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	4a52      	ldr	r2, [pc, #328]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 80010a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ac:	4b50      	ldr	r3, [pc, #320]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	494d      	ldr	r1, [pc, #308]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d044      	beq.n	8001154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d107      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d119      	bne.n	8001112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e07f      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d003      	beq.n	80010f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d107      	bne.n	8001102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010f2:	4b3f      	ldr	r3, [pc, #252]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d109      	bne.n	8001112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e06f      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001102:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e067      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001112:	4b37      	ldr	r3, [pc, #220]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f023 0203 	bic.w	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	4934      	ldr	r1, [pc, #208]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001120:	4313      	orrs	r3, r2
 8001122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001124:	f7ff fa36 	bl	8000594 <HAL_GetTick>
 8001128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800112a:	e00a      	b.n	8001142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800112c:	f7ff fa32 	bl	8000594 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	f241 3288 	movw	r2, #5000	; 0x1388
 800113a:	4293      	cmp	r3, r2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e04f      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001142:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 020c 	and.w	r2, r3, #12
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	429a      	cmp	r2, r3
 8001152:	d1eb      	bne.n	800112c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001154:	4b25      	ldr	r3, [pc, #148]	; (80011ec <HAL_RCC_ClockConfig+0x1b8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 030f 	and.w	r3, r3, #15
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d20c      	bcs.n	800117c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001162:	4b22      	ldr	r3, [pc, #136]	; (80011ec <HAL_RCC_ClockConfig+0x1b8>)
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <HAL_RCC_ClockConfig+0x1b8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d001      	beq.n	800117c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e032      	b.n	80011e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	2b00      	cmp	r3, #0
 8001186:	d008      	beq.n	800119a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	4916      	ldr	r1, [pc, #88]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	4313      	orrs	r3, r2
 8001198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d009      	beq.n	80011ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	490e      	ldr	r1, [pc, #56]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011ba:	f000 f821 	bl	8001200 <HAL_RCC_GetSysClockFreq>
 80011be:	4601      	mov	r1, r0
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_RCC_ClockConfig+0x1bc>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	091b      	lsrs	r3, r3, #4
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <HAL_RCC_ClockConfig+0x1c0>)
 80011cc:	5cd3      	ldrb	r3, [r2, r3]
 80011ce:	fa21 f303 	lsr.w	r3, r1, r3
 80011d2:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_RCC_ClockConfig+0x1c8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f996 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023c00 	.word	0x40023c00
 80011f0:	40023800 	.word	0x40023800
 80011f4:	08005c44 	.word	0x08005c44
 80011f8:	20000008 	.word	0x20000008
 80011fc:	20000000 	.word	0x20000000

08001200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001216:	4b50      	ldr	r3, [pc, #320]	; (8001358 <HAL_RCC_GetSysClockFreq+0x158>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b04      	cmp	r3, #4
 8001220:	d007      	beq.n	8001232 <HAL_RCC_GetSysClockFreq+0x32>
 8001222:	2b08      	cmp	r3, #8
 8001224:	d008      	beq.n	8001238 <HAL_RCC_GetSysClockFreq+0x38>
 8001226:	2b00      	cmp	r3, #0
 8001228:	f040 808d 	bne.w	8001346 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800122c:	4b4b      	ldr	r3, [pc, #300]	; (800135c <HAL_RCC_GetSysClockFreq+0x15c>)
 800122e:	60bb      	str	r3, [r7, #8]
       break;
 8001230:	e08c      	b.n	800134c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001232:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <HAL_RCC_GetSysClockFreq+0x160>)
 8001234:	60bb      	str	r3, [r7, #8]
      break;
 8001236:	e089      	b.n	800134c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001238:	4b47      	ldr	r3, [pc, #284]	; (8001358 <HAL_RCC_GetSysClockFreq+0x158>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001240:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001242:	4b45      	ldr	r3, [pc, #276]	; (8001358 <HAL_RCC_GetSysClockFreq+0x158>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d023      	beq.n	8001296 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800124e:	4b42      	ldr	r3, [pc, #264]	; (8001358 <HAL_RCC_GetSysClockFreq+0x158>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	099b      	lsrs	r3, r3, #6
 8001254:	f04f 0400 	mov.w	r4, #0
 8001258:	f240 11ff 	movw	r1, #511	; 0x1ff
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	ea03 0501 	and.w	r5, r3, r1
 8001264:	ea04 0602 	and.w	r6, r4, r2
 8001268:	4a3d      	ldr	r2, [pc, #244]	; (8001360 <HAL_RCC_GetSysClockFreq+0x160>)
 800126a:	fb02 f106 	mul.w	r1, r2, r6
 800126e:	2200      	movs	r2, #0
 8001270:	fb02 f205 	mul.w	r2, r2, r5
 8001274:	440a      	add	r2, r1
 8001276:	493a      	ldr	r1, [pc, #232]	; (8001360 <HAL_RCC_GetSysClockFreq+0x160>)
 8001278:	fba5 0101 	umull	r0, r1, r5, r1
 800127c:	1853      	adds	r3, r2, r1
 800127e:	4619      	mov	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f04f 0400 	mov.w	r4, #0
 8001286:	461a      	mov	r2, r3
 8001288:	4623      	mov	r3, r4
 800128a:	f7fe ff9d 	bl	80001c8 <__aeabi_uldivmod>
 800128e:	4603      	mov	r3, r0
 8001290:	460c      	mov	r4, r1
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	e049      	b.n	800132a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001296:	4b30      	ldr	r3, [pc, #192]	; (8001358 <HAL_RCC_GetSysClockFreq+0x158>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	099b      	lsrs	r3, r3, #6
 800129c:	f04f 0400 	mov.w	r4, #0
 80012a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	ea03 0501 	and.w	r5, r3, r1
 80012ac:	ea04 0602 	and.w	r6, r4, r2
 80012b0:	4629      	mov	r1, r5
 80012b2:	4632      	mov	r2, r6
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	f04f 0400 	mov.w	r4, #0
 80012bc:	0154      	lsls	r4, r2, #5
 80012be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012c2:	014b      	lsls	r3, r1, #5
 80012c4:	4619      	mov	r1, r3
 80012c6:	4622      	mov	r2, r4
 80012c8:	1b49      	subs	r1, r1, r5
 80012ca:	eb62 0206 	sbc.w	r2, r2, r6
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	f04f 0400 	mov.w	r4, #0
 80012d6:	0194      	lsls	r4, r2, #6
 80012d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012dc:	018b      	lsls	r3, r1, #6
 80012de:	1a5b      	subs	r3, r3, r1
 80012e0:	eb64 0402 	sbc.w	r4, r4, r2
 80012e4:	f04f 0100 	mov.w	r1, #0
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	00e2      	lsls	r2, r4, #3
 80012ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012f2:	00d9      	lsls	r1, r3, #3
 80012f4:	460b      	mov	r3, r1
 80012f6:	4614      	mov	r4, r2
 80012f8:	195b      	adds	r3, r3, r5
 80012fa:	eb44 0406 	adc.w	r4, r4, r6
 80012fe:	f04f 0100 	mov.w	r1, #0
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	02a2      	lsls	r2, r4, #10
 8001308:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800130c:	0299      	lsls	r1, r3, #10
 800130e:	460b      	mov	r3, r1
 8001310:	4614      	mov	r4, r2
 8001312:	4618      	mov	r0, r3
 8001314:	4621      	mov	r1, r4
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f04f 0400 	mov.w	r4, #0
 800131c:	461a      	mov	r2, r3
 800131e:	4623      	mov	r3, r4
 8001320:	f7fe ff52 	bl	80001c8 <__aeabi_uldivmod>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_RCC_GetSysClockFreq+0x158>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	0c1b      	lsrs	r3, r3, #16
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	3301      	adds	r3, #1
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	60bb      	str	r3, [r7, #8]
      break;
 8001344:	e002      	b.n	800134c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001348:	60bb      	str	r3, [r7, #8]
      break;
 800134a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800134c:	68bb      	ldr	r3, [r7, #8]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800
 800135c:	00f42400 	.word	0x00f42400
 8001360:	00b71b00 	.word	0x00b71b00

08001364 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e022      	b.n	80013bc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d105      	bne.n	800138e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f004 fa85 	bl	8005898 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2203      	movs	r2, #3
 8001392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 f814 	bl	80013c4 <HAL_SD_InitCard>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00a      	b.n	80013bc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b08e      	sub	sp, #56	; 0x38
 80013c8:	af04      	add	r7, sp, #16
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80013e0:	2376      	movs	r3, #118	; 0x76
 80013e2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681d      	ldr	r5, [r3, #0]
 80013e8:	466c      	mov	r4, sp
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80013f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013fc:	4628      	mov	r0, r5
 80013fe:	f000 ff51 	bl	80022a4 <SDIO_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e031      	b.n	8001478 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <HAL_SD_InitCard+0xbc>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f000 ff89 	bl	8002336 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_SD_InitCard+0xbc>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fe84 	bl	8002138 <SD_PowerON>
 8001430:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00b      	beq.n	8001450 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e013      	b.n	8001478 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 fda3 	bl	8001f9c <SD_InitCard>
 8001456:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001458:	6a3b      	ldr	r3, [r7, #32]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00b      	beq.n	8001476 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3728      	adds	r7, #40	; 0x28
 800147c:	46bd      	mov	sp, r7
 800147e:	bdb0      	pop	{r4, r5, r7, pc}
 8001480:	422580a0 	.word	0x422580a0

08001484 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b092      	sub	sp, #72	; 0x48
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001492:	f7ff f87f 	bl	8000594 <HAL_GetTick>
 8001496:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d107      	bne.n	80014b6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e1d9      	b.n	800186a <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	f040 81cc 	bne.w	800185c <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80014ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	441a      	add	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d907      	bls.n	80014e8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014dc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e1c0      	b.n	800186a <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2203      	movs	r2, #3
 80014ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2200      	movs	r2, #0
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d002      	beq.n	8001506 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8001500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001502:	025b      	lsls	r3, r3, #9
 8001504:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800150e:	4618      	mov	r0, r3
 8001510:	f000 ffa4 	bl	800245c <SDMMC_CmdBlockLength>
 8001514:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8001516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00f      	beq.n	800153c <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a9b      	ldr	r2, [pc, #620]	; (8001790 <HAL_SD_ReadBlocks+0x30c>)
 8001522:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800152a:	431a      	orrs	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e196      	b.n	800186a <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800153c:	f04f 33ff 	mov.w	r3, #4294967295
 8001540:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	025b      	lsls	r3, r3, #9
 8001546:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001548:	2390      	movs	r3, #144	; 0x90
 800154a:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800154c:	2302      	movs	r3, #2
 800154e:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001554:	2301      	movs	r3, #1
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f107 0214 	add.w	r2, r7, #20
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f000 ff4e 	bl	8002404 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d90a      	bls.n	8001584 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2202      	movs	r2, #2
 8001572:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800157a:	4618      	mov	r0, r3
 800157c:	f000 ffb2 	bl	80024e4 <SDMMC_CmdReadMultiBlock>
 8001580:	6478      	str	r0, [r7, #68]	; 0x44
 8001582:	e009      	b.n	8001598 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2201      	movs	r2, #1
 8001588:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001590:	4618      	mov	r0, r3
 8001592:	f000 ff85 	bl	80024a0 <SDMMC_CmdReadSingleBlock>
 8001596:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800159a:	2b00      	cmp	r3, #0
 800159c:	d012      	beq.n	80015c4 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a7b      	ldr	r2, [pc, #492]	; (8001790 <HAL_SD_ReadBlocks+0x30c>)
 80015a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ac:	431a      	orrs	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e152      	b.n	800186a <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80015c8:	e061      	b.n	800168e <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d03c      	beq.n	8001652 <HAL_SD_ReadBlocks+0x1ce>
 80015d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d039      	beq.n	8001652 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80015de:	2300      	movs	r3, #0
 80015e0:	643b      	str	r3, [r7, #64]	; 0x40
 80015e2:	e033      	b.n	800164c <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fe86 	bl	80022fa <SDIO_ReadFIFO>
 80015ee:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80015f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80015f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fa:	3301      	adds	r3, #1
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80015fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001600:	3b01      	subs	r3, #1
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001606:	0a1b      	lsrs	r3, r3, #8
 8001608:	b2da      	uxtb	r2, r3
 800160a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800160c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800160e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001610:	3301      	adds	r3, #1
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001616:	3b01      	subs	r3, #1
 8001618:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161c:	0c1b      	lsrs	r3, r3, #16
 800161e:	b2da      	uxtb	r2, r3
 8001620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001622:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001626:	3301      	adds	r3, #1
 8001628:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800162a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800162c:	3b01      	subs	r3, #1
 800162e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001632:	0e1b      	lsrs	r3, r3, #24
 8001634:	b2da      	uxtb	r2, r3
 8001636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001638:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800163a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800163c:	3301      	adds	r3, #1
 800163e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001642:	3b01      	subs	r3, #1
 8001644:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8001646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001648:	3301      	adds	r3, #1
 800164a:	643b      	str	r3, [r7, #64]	; 0x40
 800164c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800164e:	2b07      	cmp	r3, #7
 8001650:	d9c8      	bls.n	80015e4 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001652:	f7fe ff9f 	bl	8000594 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800165e:	429a      	cmp	r2, r3
 8001660:	d902      	bls.n	8001668 <HAL_SD_ReadBlocks+0x1e4>
 8001662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001664:	2b00      	cmp	r3, #0
 8001666:	d112      	bne.n	800168e <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a48      	ldr	r2, [pc, #288]	; (8001790 <HAL_SD_ReadBlocks+0x30c>)
 800166e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001674:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e0ed      	b.n	800186a <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001694:	f240 332a 	movw	r3, #810	; 0x32a
 8001698:	4013      	ands	r3, r2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d095      	beq.n	80015ca <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d022      	beq.n	80016f2 <HAL_SD_ReadBlocks+0x26e>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d91f      	bls.n	80016f2 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d01b      	beq.n	80016f2 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 ff76 	bl	80025b0 <SDMMC_CmdStopTransfer>
 80016c4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80016c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d012      	beq.n	80016f2 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <HAL_SD_ReadBlocks+0x30c>)
 80016d2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016da:	431a      	orrs	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e0bb      	b.n	800186a <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d012      	beq.n	8001726 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a22      	ldr	r2, [pc, #136]	; (8001790 <HAL_SD_ReadBlocks+0x30c>)
 8001706:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170c:	f043 0208 	orr.w	r2, r3, #8
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e0a1      	b.n	800186a <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d012      	beq.n	800175a <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a15      	ldr	r2, [pc, #84]	; (8001790 <HAL_SD_ReadBlocks+0x30c>)
 800173a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001740:	f043 0202 	orr.w	r2, r3, #2
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e087      	b.n	800186a <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	2b00      	cmp	r3, #0
 8001766:	d064      	beq.n	8001832 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_SD_ReadBlocks+0x30c>)
 800176e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001774:	f043 0220 	orr.w	r2, r3, #32
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e06d      	b.n	800186a <HAL_SD_ReadBlocks+0x3e6>
 800178e:	bf00      	nop
 8001790:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f000 fdae 	bl	80022fa <SDIO_ReadFIFO>
 800179e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80017a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80017a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017aa:	3301      	adds	r3, #1
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80017ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017b0:	3b01      	subs	r3, #1
 80017b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80017b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017bc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80017be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c0:	3301      	adds	r3, #1
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80017c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017c6:	3b01      	subs	r3, #1
 80017c8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80017ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017cc:	0c1b      	lsrs	r3, r3, #16
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80017d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d6:	3301      	adds	r3, #1
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80017da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017dc:	3b01      	subs	r3, #1
 80017de:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80017e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e2:	0e1b      	lsrs	r3, r3, #24
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80017ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ec:	3301      	adds	r3, #1
 80017ee:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80017f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017f2:	3b01      	subs	r3, #1
 80017f4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80017f6:	f7fe fecd 	bl	8000594 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001802:	429a      	cmp	r2, r3
 8001804:	d902      	bls.n	800180c <HAL_SD_ReadBlocks+0x388>
 8001806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001808:	2b00      	cmp	r3, #0
 800180a:	d112      	bne.n	8001832 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a18      	ldr	r2, [pc, #96]	; (8001874 <HAL_SD_ReadBlocks+0x3f0>)
 8001812:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001818:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e01b      	b.n	800186a <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d002      	beq.n	8001846 <HAL_SD_ReadBlocks+0x3c2>
 8001840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1a6      	bne.n	8001794 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f240 523a 	movw	r2, #1338	; 0x53a
 800184e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	e006      	b.n	800186a <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001860:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
  }
}
 800186a:	4618      	mov	r0, r3
 800186c:	3748      	adds	r7, #72	; 0x48
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	004005ff 	.word	0x004005ff

08001878 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b092      	sub	sp, #72	; 0x48
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001886:	f7fe fe85 	bl	8000594 <HAL_GetTick>
 800188a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d107      	bne.n	80018aa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e184      	b.n	8001bb4 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	f040 8177 	bne.w	8001ba6 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80018be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	441a      	add	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d907      	bls.n	80018dc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e16b      	b.n	8001bb4 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2203      	movs	r2, #3
 80018e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2200      	movs	r2, #0
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d002      	beq.n	80018fa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80018f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f6:	025b      	lsls	r3, r3, #9
 80018f8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fdaa 	bl	800245c <SDMMC_CmdBlockLength>
 8001908:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800190a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00f      	beq.n	8001930 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a9d      	ldr	r2, [pc, #628]	; (8001b8c <HAL_SD_WriteBlocks+0x314>)
 8001916:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800191c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800191e:	431a      	orrs	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e141      	b.n	8001bb4 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001930:	f04f 33ff 	mov.w	r3, #4294967295
 8001934:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	025b      	lsls	r3, r3, #9
 800193a:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800193c:	2390      	movs	r3, #144	; 0x90
 800193e:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001944:	2300      	movs	r3, #0
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001948:	2301      	movs	r3, #1
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f107 0218 	add.w	r2, r7, #24
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fd54 	bl	8002404 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d90a      	bls.n	8001978 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2220      	movs	r2, #32
 8001966:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800196e:	4618      	mov	r0, r3
 8001970:	f000 fdfc 	bl	800256c <SDMMC_CmdWriteMultiBlock>
 8001974:	6478      	str	r0, [r7, #68]	; 0x44
 8001976:	e009      	b.n	800198c <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2210      	movs	r2, #16
 800197c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001984:	4618      	mov	r0, r3
 8001986:	f000 fdcf 	bl	8002528 <SDMMC_CmdWriteSingleBlock>
 800198a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800198c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800198e:	2b00      	cmp	r3, #0
 8001990:	d012      	beq.n	80019b8 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7d      	ldr	r2, [pc, #500]	; (8001b8c <HAL_SD_WriteBlocks+0x314>)
 8001998:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800199e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a0:	431a      	orrs	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0fd      	b.n	8001bb4 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80019bc:	e065      	b.n	8001a8a <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d040      	beq.n	8001a4e <HAL_SD_WriteBlocks+0x1d6>
 80019cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d03d      	beq.n	8001a4e <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	643b      	str	r3, [r7, #64]	; 0x40
 80019d6:	e037      	b.n	8001a48 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80019d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80019de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e0:	3301      	adds	r3, #1
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80019e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019e6:	3b01      	subs	r3, #1
 80019e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80019ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	021a      	lsls	r2, r3, #8
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80019f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f8:	3301      	adds	r3, #1
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80019fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019fe:	3b01      	subs	r3, #1
 8001a00:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8001a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	041a      	lsls	r2, r3, #16
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a10:	3301      	adds	r3, #1
 8001a12:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a16:	3b01      	subs	r3, #1
 8001a18:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8001a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	061a      	lsls	r2, r3, #24
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a28:	3301      	adds	r3, #1
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f107 0214 	add.w	r2, r7, #20
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 fc69 	bl	8002314 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8001a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a44:	3301      	adds	r3, #1
 8001a46:	643b      	str	r3, [r7, #64]	; 0x40
 8001a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a4a:	2b07      	cmp	r3, #7
 8001a4c:	d9c4      	bls.n	80019d8 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001a4e:	f7fe fda1 	bl	8000594 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d902      	bls.n	8001a64 <HAL_SD_WriteBlocks+0x1ec>
 8001a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d112      	bne.n	8001a8a <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a48      	ldr	r2, [pc, #288]	; (8001b8c <HAL_SD_WriteBlocks+0x314>)
 8001a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a72:	431a      	orrs	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e094      	b.n	8001bb4 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a90:	f240 331a 	movw	r3, #794	; 0x31a
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d091      	beq.n	80019be <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d022      	beq.n	8001aee <HAL_SD_WriteBlocks+0x276>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d91f      	bls.n	8001aee <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d01b      	beq.n	8001aee <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 fd78 	bl	80025b0 <SDMMC_CmdStopTransfer>
 8001ac0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d012      	beq.n	8001aee <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a2f      	ldr	r2, [pc, #188]	; (8001b8c <HAL_SD_WriteBlocks+0x314>)
 8001ace:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e062      	b.n	8001bb4 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d012      	beq.n	8001b22 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a22      	ldr	r2, [pc, #136]	; (8001b8c <HAL_SD_WriteBlocks+0x314>)
 8001b02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b08:	f043 0208 	orr.w	r2, r3, #8
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e048      	b.n	8001bb4 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d012      	beq.n	8001b56 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <HAL_SD_WriteBlocks+0x314>)
 8001b36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3c:	f043 0202 	orr.w	r2, r3, #2
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e02e      	b.n	8001bb4 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d015      	beq.n	8001b90 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <HAL_SD_WriteBlocks+0x314>)
 8001b6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b70:	f043 0210 	orr.w	r2, r3, #16
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e014      	b.n	8001bb4 <HAL_SD_WriteBlocks+0x33c>
 8001b8a:	bf00      	nop
 8001b8c:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f240 523a 	movw	r2, #1338	; 0x53a
 8001b98:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e006      	b.n	8001bb4 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001baa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
  }
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3748      	adds	r7, #72	; 0x48
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bca:	0f9b      	lsrs	r3, r3, #30
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bd6:	0e9b      	lsrs	r3, r3, #26
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001be8:	0e1b      	lsrs	r3, r3, #24
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bfa:	0c1b      	lsrs	r3, r3, #16
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c1c:	0d1b      	lsrs	r3, r3, #20
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c28:	0c1b      	lsrs	r3, r3, #16
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c3a:	0bdb      	lsrs	r3, r3, #15
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c4c:	0b9b      	lsrs	r3, r3, #14
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c5e:	0b5b      	lsrs	r3, r3, #13
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c70:	0b1b      	lsrs	r3, r3, #12
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2200      	movs	r2, #0
 8001c82:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d163      	bne.n	8001d54 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c90:	009a      	lsls	r2, r3, #2
 8001c92:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c96:	4013      	ands	r3, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001c9c:	0f92      	lsrs	r2, r2, #30
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ca8:	0edb      	lsrs	r3, r3, #27
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cba:	0e1b      	lsrs	r3, r3, #24
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ccc:	0d5b      	lsrs	r3, r3, #21
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cde:	0c9b      	lsrs	r3, r3, #18
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cf0:	0bdb      	lsrs	r3, r3, #15
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	7e1b      	ldrb	r3, [r3, #24]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	3302      	adds	r3, #2
 8001d14:	2201      	movs	r2, #1
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001d1e:	fb02 f203 	mul.w	r2, r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	7a1b      	ldrb	r3, [r3, #8]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	2201      	movs	r2, #1
 8001d32:	409a      	lsls	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001d40:	0a52      	lsrs	r2, r2, #9
 8001d42:	fb02 f203 	mul.w	r2, r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d50:	661a      	str	r2, [r3, #96]	; 0x60
 8001d52:	e031      	b.n	8001db8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d11d      	bne.n	8001d98 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d60:	041b      	lsls	r3, r3, #16
 8001d62:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d6a:	0c1b      	lsrs	r3, r3, #16
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	3301      	adds	r3, #1
 8001d78:	029a      	lsls	r2, r3, #10
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d8c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	661a      	str	r2, [r3, #96]	; 0x60
 8001d96:	e00f      	b.n	8001db8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a58      	ldr	r2, [pc, #352]	; (8001f00 <HAL_SD_GetCardCSD+0x344>)
 8001d9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e09d      	b.n	8001ef4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dbc:	0b9b      	lsrs	r3, r3, #14
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dce:	09db      	lsrs	r3, r3, #7
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df0:	0fdb      	lsrs	r3, r3, #31
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	0f5b      	lsrs	r3, r3, #29
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0e:	0e9b      	lsrs	r3, r3, #26
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e20:	0d9b      	lsrs	r3, r3, #22
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e32:	0d5b      	lsrs	r3, r3, #21
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4e:	0c1b      	lsrs	r3, r3, #16
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e62:	0bdb      	lsrs	r3, r3, #15
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e76:	0b9b      	lsrs	r3, r3, #14
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	0b5b      	lsrs	r3, r3, #13
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9e:	0b1b      	lsrs	r3, r3, #12
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	0a9b      	lsrs	r3, r3, #10
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eda:	085b      	lsrs	r3, r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	004005ff 	.word	0x004005ff

08001f04 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f970 	bl	8002254 <SD_SendStatus>
 8001f74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	0a5b      	lsrs	r3, r3, #9
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8001f92:	693b      	ldr	r3, [r7, #16]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001f9c:	b5b0      	push	{r4, r5, r7, lr}
 8001f9e:	b094      	sub	sp, #80	; 0x50
 8001fa0:	af04      	add	r7, sp, #16
 8001fa2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 f9d1 	bl	8002354 <SDIO_GetPowerState>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d102      	bne.n	8001fbe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8001fb8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fbc:	e0b7      	b.n	800212e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d02f      	beq.n	8002026 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fbb7 	bl	800273e <SDMMC_CmdSendCID>
 8001fd0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8001fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <SD_InitCard+0x40>
    {
      return errorstate;
 8001fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fda:	e0a8      	b.n	800212e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f9fb 	bl	80023de <SDIO_GetResponse>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2104      	movs	r1, #4
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 f9f2 	bl	80023de <SDIO_GetResponse>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2108      	movs	r1, #8
 8002006:	4618      	mov	r0, r3
 8002008:	f000 f9e9 	bl	80023de <SDIO_GetResponse>
 800200c:	4602      	mov	r2, r0
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	210c      	movs	r1, #12
 8002018:	4618      	mov	r0, r3
 800201a:	f000 f9e0 	bl	80023de <SDIO_GetResponse>
 800201e:	4602      	mov	r2, r0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	2b03      	cmp	r3, #3
 800202c:	d00d      	beq.n	800204a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f107 020e 	add.w	r2, r7, #14
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f000 fbbd 	bl	80027b8 <SDMMC_CmdSetRelAdd>
 800203e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <SD_InitCard+0xae>
    {
      return errorstate;
 8002046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002048:	e071      	b.n	800212e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	2b03      	cmp	r3, #3
 8002050:	d036      	beq.n	80020c0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002052:	89fb      	ldrh	r3, [r7, #14]
 8002054:	461a      	mov	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002062:	041b      	lsls	r3, r3, #16
 8002064:	4619      	mov	r1, r3
 8002066:	4610      	mov	r0, r2
 8002068:	f000 fb87 	bl	800277a <SDMMC_CmdSendCSD>
 800206c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800206e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002076:	e05a      	b.n	800212e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2100      	movs	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f000 f9ad 	bl	80023de <SDIO_GetResponse>
 8002084:	4602      	mov	r2, r0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2104      	movs	r1, #4
 8002090:	4618      	mov	r0, r3
 8002092:	f000 f9a4 	bl	80023de <SDIO_GetResponse>
 8002096:	4602      	mov	r2, r0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2108      	movs	r1, #8
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f99b 	bl	80023de <SDIO_GetResponse>
 80020a8:	4602      	mov	r2, r0
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	210c      	movs	r1, #12
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 f992 	bl	80023de <SDIO_GetResponse>
 80020ba:	4602      	mov	r2, r0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2104      	movs	r1, #4
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 f989 	bl	80023de <SDIO_GetResponse>
 80020cc:	4603      	mov	r3, r0
 80020ce:	0d1a      	lsrs	r2, r3, #20
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	4619      	mov	r1, r3
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff fd6e 	bl	8001bbc <HAL_SD_GetCardCSD>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80020e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80020ea:	e020      	b.n	800212e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6819      	ldr	r1, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f4:	041b      	lsls	r3, r3, #16
 80020f6:	f04f 0400 	mov.w	r4, #0
 80020fa:	461a      	mov	r2, r3
 80020fc:	4623      	mov	r3, r4
 80020fe:	4608      	mov	r0, r1
 8002100:	f000 fa78 	bl	80025f4 <SDMMC_CmdSelDesel>
 8002104:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <SD_InitCard+0x174>
  {
    return errorstate;
 800210c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210e:	e00e      	b.n	800212e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681d      	ldr	r5, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	466c      	mov	r4, sp
 8002118:	f103 0210 	add.w	r2, r3, #16
 800211c:	ca07      	ldmia	r2, {r0, r1, r2}
 800211e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002122:	3304      	adds	r3, #4
 8002124:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002126:	4628      	mov	r0, r5
 8002128:	f000 f8bc 	bl	80022a4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3740      	adds	r7, #64	; 0x40
 8002132:	46bd      	mov	sp, r7
 8002134:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002138 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	2300      	movs	r3, #0
 800214a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f000 fa72 	bl	800263a <SDMMC_CmdGoIdleState>
 8002156:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <SD_PowerON+0x2a>
  {
    return errorstate;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	e072      	b.n	8002248 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f000 fa85 	bl	8002676 <SDMMC_CmdOperCond>
 800216c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00d      	beq.n	8002190 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f000 fa5b 	bl	800263a <SDMMC_CmdGoIdleState>
 8002184:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d004      	beq.n	8002196 <SD_PowerON+0x5e>
    {
      return errorstate;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	e05b      	b.n	8002248 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219a:	2b01      	cmp	r3, #1
 800219c:	d137      	bne.n	800220e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fa85 	bl	80026b4 <SDMMC_CmdAppCommand>
 80021aa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d02d      	beq.n	800220e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80021b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80021b6:	e047      	b.n	8002248 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 fa78 	bl	80026b4 <SDMMC_CmdAppCommand>
 80021c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <SD_PowerON+0x98>
    {
      return errorstate;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	e03b      	b.n	8002248 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	491e      	ldr	r1, [pc, #120]	; (8002250 <SD_PowerON+0x118>)
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fa8e 	bl	80026f8 <SDMMC_CmdAppOperCommand>
 80021dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80021e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80021e8:	e02e      	b.n	8002248 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 f8f4 	bl	80023de <SDIO_GetResponse>
 80021f6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	0fdb      	lsrs	r3, r3, #31
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <SD_PowerON+0xcc>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <SD_PowerON+0xce>
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]

    count++;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	3301      	adds	r3, #1
 800220c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002214:	4293      	cmp	r3, r2
 8002216:	d802      	bhi.n	800221e <SD_PowerON+0xe6>
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0cc      	beq.n	80021b8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002224:	4293      	cmp	r3, r2
 8002226:	d902      	bls.n	800222e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800222c:	e00c      	b.n	8002248 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	645a      	str	r2, [r3, #68]	; 0x44
 800223e:	e002      	b.n	8002246 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	c1100000 	.word	0xc1100000

08002254 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002264:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002268:	e018      	b.n	800229c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002272:	041b      	lsls	r3, r3, #16
 8002274:	4619      	mov	r1, r3
 8002276:	4610      	mov	r0, r2
 8002278:	f000 fabf 	bl	80027fa <SDMMC_CmdSendStatus>
 800227c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	e009      	b.n	800229c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f8a5 	bl	80023de <SDIO_GetResponse>
 8002294:	4602      	mov	r2, r0
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80022a4:	b084      	sub	sp, #16
 80022a6:	b480      	push	{r7}
 80022a8:	b085      	sub	sp, #20
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	f107 001c 	add.w	r0, r7, #28
 80022b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80022ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80022bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80022be:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80022c2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80022c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80022c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80022c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80022ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 80022cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80022ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80022de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	b004      	add	sp, #16
 80022f8:	4770      	bx	lr

080022fa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2203      	movs	r2, #3
 8002342:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8002344:	2002      	movs	r0, #2
 8002346:	f7fe f931 	bl	80005ac <HAL_Delay>
  
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0303 	and.w	r3, r3, #3
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800238e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8002394:	431a      	orrs	r2, r3
                       Command->CPSM);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800239a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80023aa:	f023 030f 	bic.w	r3, r3, #15
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	b2db      	uxtb	r3, r3
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80023de:	b480      	push	{r7}
 80023e0:	b085      	sub	sp, #20
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3314      	adds	r3, #20
 80023ec:	461a      	mov	r2, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	4413      	add	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
}  
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800242a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8002430:	431a      	orrs	r2, r3
                       Data->DPSM);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8002436:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800244e:	2300      	movs	r3, #0

}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800246a:	2310      	movs	r3, #16
 800246c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800246e:	2340      	movs	r3, #64	; 0x40
 8002470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800247a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800247c:	f107 0308 	add.w	r3, r7, #8
 8002480:	4619      	mov	r1, r3
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ff74 	bl	8002370 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8002488:	f241 3288 	movw	r2, #5000	; 0x1388
 800248c:	2110      	movs	r1, #16
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f9fe 	bl	8002890 <SDMMC_GetCmdResp1>
 8002494:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002496:	69fb      	ldr	r3, [r7, #28]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3720      	adds	r7, #32
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80024ae:	2311      	movs	r3, #17
 80024b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80024b2:	2340      	movs	r3, #64	; 0x40
 80024b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80024ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80024c0:	f107 0308 	add.w	r3, r7, #8
 80024c4:	4619      	mov	r1, r3
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff ff52 	bl	8002370 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80024cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d0:	2111      	movs	r1, #17
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f9dc 	bl	8002890 <SDMMC_GetCmdResp1>
 80024d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80024da:	69fb      	ldr	r3, [r7, #28]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3720      	adds	r7, #32
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80024f2:	2312      	movs	r3, #18
 80024f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80024f6:	2340      	movs	r3, #64	; 0x40
 80024f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80024fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002502:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002504:	f107 0308 	add.w	r3, r7, #8
 8002508:	4619      	mov	r1, r3
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ff30 	bl	8002370 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002510:	f241 3288 	movw	r2, #5000	; 0x1388
 8002514:	2112      	movs	r1, #18
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f9ba 	bl	8002890 <SDMMC_GetCmdResp1>
 800251c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800251e:	69fb      	ldr	r3, [r7, #28]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3720      	adds	r7, #32
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002536:	2318      	movs	r3, #24
 8002538:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800253a:	2340      	movs	r3, #64	; 0x40
 800253c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002546:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002548:	f107 0308 	add.w	r3, r7, #8
 800254c:	4619      	mov	r1, r3
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff ff0e 	bl	8002370 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002554:	f241 3288 	movw	r2, #5000	; 0x1388
 8002558:	2118      	movs	r1, #24
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f998 	bl	8002890 <SDMMC_GetCmdResp1>
 8002560:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002562:	69fb      	ldr	r3, [r7, #28]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3720      	adds	r7, #32
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800257a:	2319      	movs	r3, #25
 800257c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800257e:	2340      	movs	r3, #64	; 0x40
 8002580:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800258a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800258c:	f107 0308 	add.w	r3, r7, #8
 8002590:	4619      	mov	r1, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff feec 	bl	8002370 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	2119      	movs	r1, #25
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f976 	bl	8002890 <SDMMC_GetCmdResp1>
 80025a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80025a6:	69fb      	ldr	r3, [r7, #28]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3720      	adds	r7, #32
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80025bc:	230c      	movs	r3, #12
 80025be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80025c0:	2340      	movs	r3, #64	; 0x40
 80025c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80025c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80025ce:	f107 0308 	add.w	r3, r7, #8
 80025d2:	4619      	mov	r1, r3
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff fecb 	bl	8002370 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80025da:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <SDMMC_CmdStopTransfer+0x40>)
 80025dc:	210c      	movs	r1, #12
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f956 	bl	8002890 <SDMMC_GetCmdResp1>
 80025e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80025e6:	69fb      	ldr	r3, [r7, #28]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3720      	adds	r7, #32
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	05f5e100 	.word	0x05f5e100

080025f4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	; 0x28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002604:	2307      	movs	r3, #7
 8002606:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002608:	2340      	movs	r3, #64	; 0x40
 800260a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002614:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002616:	f107 0310 	add.w	r3, r7, #16
 800261a:	4619      	mov	r1, r3
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f7ff fea7 	bl	8002370 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	2107      	movs	r1, #7
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f931 	bl	8002890 <SDMMC_GetCmdResp1>
 800262e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002632:	4618      	mov	r0, r3
 8002634:	3728      	adds	r7, #40	; 0x28
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b088      	sub	sp, #32
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002656:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002658:	f107 0308 	add.w	r3, r7, #8
 800265c:	4619      	mov	r1, r3
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fe86 	bl	8002370 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f8eb 	bl	8002840 <SDMMC_GetCmdError>
 800266a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800266c:	69fb      	ldr	r3, [r7, #28]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b088      	sub	sp, #32
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800267e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8002682:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002684:	2308      	movs	r3, #8
 8002686:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002688:	2340      	movs	r3, #64	; 0x40
 800268a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002694:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002696:	f107 0308 	add.w	r3, r7, #8
 800269a:	4619      	mov	r1, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff fe67 	bl	8002370 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fad4 	bl	8002c50 <SDMMC_GetCmdResp7>
 80026a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80026aa:	69fb      	ldr	r3, [r7, #28]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3720      	adds	r7, #32
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80026c2:	2337      	movs	r3, #55	; 0x37
 80026c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80026c6:	2340      	movs	r3, #64	; 0x40
 80026c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80026ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80026d4:	f107 0308 	add.w	r3, r7, #8
 80026d8:	4619      	mov	r1, r3
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff fe48 	bl	8002370 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80026e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e4:	2137      	movs	r1, #55	; 0x37
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f8d2 	bl	8002890 <SDMMC_GetCmdResp1>
 80026ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80026ee:	69fb      	ldr	r3, [r7, #28]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3720      	adds	r7, #32
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002708:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800270c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800270e:	2329      	movs	r3, #41	; 0x29
 8002710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002712:	2340      	movs	r3, #64	; 0x40
 8002714:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800271a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800271e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002720:	f107 0308 	add.w	r3, r7, #8
 8002724:	4619      	mov	r1, r3
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff fe22 	bl	8002370 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f9e1 	bl	8002af4 <SDMMC_GetCmdResp3>
 8002732:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002734:	69fb      	ldr	r3, [r7, #28]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b088      	sub	sp, #32
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800274a:	2302      	movs	r3, #2
 800274c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800274e:	23c0      	movs	r3, #192	; 0xc0
 8002750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800275a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800275c:	f107 0308 	add.w	r3, r7, #8
 8002760:	4619      	mov	r1, r3
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff fe04 	bl	8002370 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f97d 	bl	8002a68 <SDMMC_GetCmdResp2>
 800276e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002770:	69fb      	ldr	r3, [r7, #28]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b088      	sub	sp, #32
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002788:	2309      	movs	r3, #9
 800278a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800278c:	23c0      	movs	r3, #192	; 0xc0
 800278e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002798:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800279a:	f107 0308 	add.w	r3, r7, #8
 800279e:	4619      	mov	r1, r3
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff fde5 	bl	8002370 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f95e 	bl	8002a68 <SDMMC_GetCmdResp2>
 80027ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80027ae:	69fb      	ldr	r3, [r7, #28]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3720      	adds	r7, #32
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80027c6:	2303      	movs	r3, #3
 80027c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80027ca:	2340      	movs	r3, #64	; 0x40
 80027cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80027d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80027d8:	f107 0308 	add.w	r3, r7, #8
 80027dc:	4619      	mov	r1, r3
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff fdc6 	bl	8002370 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	2103      	movs	r1, #3
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f9bd 	bl	8002b68 <SDMMC_GetCmdResp6>
 80027ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80027f0:	69fb      	ldr	r3, [r7, #28]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3720      	adds	r7, #32
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b088      	sub	sp, #32
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002808:	230d      	movs	r3, #13
 800280a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800280c:	2340      	movs	r3, #64	; 0x40
 800280e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002818:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800281a:	f107 0308 	add.w	r3, r7, #8
 800281e:	4619      	mov	r1, r3
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff fda5 	bl	8002370 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8002826:	f241 3288 	movw	r2, #5000	; 0x1388
 800282a:	210d      	movs	r1, #13
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f82f 	bl	8002890 <SDMMC_GetCmdResp1>
 8002832:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002834:	69fb      	ldr	r3, [r7, #28]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8002840:	b490      	push	{r4, r7}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <SDMMC_GetCmdError+0x48>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0f      	ldr	r2, [pc, #60]	; (800288c <SDMMC_GetCmdError+0x4c>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0a5b      	lsrs	r3, r3, #9
 8002854:	f241 3288 	movw	r2, #5000	; 0x1388
 8002858:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800285c:	4623      	mov	r3, r4
 800285e:	1e5c      	subs	r4, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002864:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002868:	e009      	b.n	800287e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f2      	beq.n	800285c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	22c5      	movs	r2, #197	; 0xc5
 800287a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bc90      	pop	{r4, r7}
 8002886:	4770      	bx	lr
 8002888:	20000008 	.word	0x20000008
 800288c:	10624dd3 	.word	0x10624dd3

08002890 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	460b      	mov	r3, r1
 800289a:	607a      	str	r2, [r7, #4]
 800289c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800289e:	4b6f      	ldr	r3, [pc, #444]	; (8002a5c <SDMMC_GetCmdResp1+0x1cc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6f      	ldr	r2, [pc, #444]	; (8002a60 <SDMMC_GetCmdResp1+0x1d0>)
 80028a4:	fba2 2303 	umull	r2, r3, r2, r3
 80028a8:	0a5b      	lsrs	r3, r3, #9
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80028b0:	4623      	mov	r3, r4
 80028b2:	1e5c      	subs	r4, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80028b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80028bc:	e0c9      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <SDMMC_GetCmdResp1+0x20>
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1eb      	bne.n	80028b0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d004      	beq.n	80028ee <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2204      	movs	r2, #4
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80028ea:	2304      	movs	r3, #4
 80028ec:	e0b1      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002900:	2301      	movs	r3, #1
 8002902:	e0a6      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	22c5      	movs	r2, #197	; 0xc5
 8002908:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f7ff fd5a 	bl	80023c4 <SDIO_GetCommandResponse>
 8002910:	4603      	mov	r3, r0
 8002912:	461a      	mov	r2, r3
 8002914:	7afb      	ldrb	r3, [r7, #11]
 8002916:	4293      	cmp	r3, r2
 8002918:	d001      	beq.n	800291e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800291a:	2301      	movs	r3, #1
 800291c:	e099      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800291e:	2100      	movs	r1, #0
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f7ff fd5c 	bl	80023de <SDIO_GetResponse>
 8002926:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4b4e      	ldr	r3, [pc, #312]	; (8002a64 <SDMMC_GetCmdResp1+0x1d4>)
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8002932:	2300      	movs	r3, #0
 8002934:	e08d      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	da02      	bge.n	8002942 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800293c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002940:	e087      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800294c:	2340      	movs	r3, #64	; 0x40
 800294e:	e080      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	e079      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800296c:	e071      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800297c:	e069      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800298c:	e061      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002998:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800299c:	e059      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80029a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ac:	e051      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80029b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029bc:	e049      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80029c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029cc:	e041      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80029d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029dc:	e039      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80029e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ec:	e031      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80029f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029fc:	e029      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002a08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a0c:	e021      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002a18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a1c:	e019      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002a28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a2c:	e011      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8002a38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a3c:	e009      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8002a48:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002a4c:	e001      	b.n	8002a52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002a4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd90      	pop	{r4, r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000008 	.word	0x20000008
 8002a60:	10624dd3 	.word	0x10624dd3
 8002a64:	fdffe008 	.word	0xfdffe008

08002a68 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8002a68:	b490      	push	{r4, r7}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002a70:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <SDMMC_GetCmdResp2+0x84>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1e      	ldr	r2, [pc, #120]	; (8002af0 <SDMMC_GetCmdResp2+0x88>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	0a5b      	lsrs	r3, r3, #9
 8002a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a80:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8002a84:	4623      	mov	r3, r4
 8002a86:	1e5c      	subs	r4, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002a8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002a90:	e026      	b.n	8002ae0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a96:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <SDMMC_GetCmdResp2+0x1c>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1eb      	bne.n	8002a84 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d004      	beq.n	8002ac2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2204      	movs	r2, #4
 8002abc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002abe:	2304      	movs	r3, #4
 8002ac0:	e00e      	b.n	8002ae0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d004      	beq.n	8002ad8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e003      	b.n	8002ae0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	22c5      	movs	r2, #197	; 0xc5
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc90      	pop	{r4, r7}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20000008 	.word	0x20000008
 8002af0:	10624dd3 	.word	0x10624dd3

08002af4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8002af4:	b490      	push	{r4, r7}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002afc:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <SDMMC_GetCmdResp3+0x6c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <SDMMC_GetCmdResp3+0x70>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	0a5b      	lsrs	r3, r3, #9
 8002b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8002b10:	4623      	mov	r3, r4
 8002b12:	1e5c      	subs	r4, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d102      	bne.n	8002b1e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002b18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002b1c:	e01b      	b.n	8002b56 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b22:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <SDMMC_GetCmdResp3+0x1c>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1eb      	bne.n	8002b10 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d004      	beq.n	8002b4e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2204      	movs	r2, #4
 8002b48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	e003      	b.n	8002b56 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	22c5      	movs	r2, #197	; 0xc5
 8002b52:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc90      	pop	{r4, r7}
 8002b5e:	4770      	bx	lr
 8002b60:	20000008 	.word	0x20000008
 8002b64:	10624dd3 	.word	0x10624dd3

08002b68 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	460b      	mov	r3, r1
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002b76:	4b34      	ldr	r3, [pc, #208]	; (8002c48 <SDMMC_GetCmdResp6+0xe0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a34      	ldr	r2, [pc, #208]	; (8002c4c <SDMMC_GetCmdResp6+0xe4>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	0a5b      	lsrs	r3, r3, #9
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8002b8a:	4623      	mov	r3, r4
 8002b8c:	1e5c      	subs	r4, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d102      	bne.n	8002b98 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002b92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002b96:	e052      	b.n	8002c3e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <SDMMC_GetCmdResp6+0x22>
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1eb      	bne.n	8002b8a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d004      	beq.n	8002bc8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002bc4:	2304      	movs	r3, #4
 8002bc6:	e03a      	b.n	8002c3e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d004      	beq.n	8002bde <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e02f      	b.n	8002c3e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f7ff fbf0 	bl	80023c4 <SDIO_GetCommandResponse>
 8002be4:	4603      	mov	r3, r0
 8002be6:	461a      	mov	r2, r3
 8002be8:	7afb      	ldrb	r3, [r7, #11]
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d001      	beq.n	8002bf2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e025      	b.n	8002c3e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	22c5      	movs	r2, #197	; 0xc5
 8002bf6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f7ff fbef 	bl	80023de <SDIO_GetResponse>
 8002c00:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d106      	bne.n	8002c1a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	0c1b      	lsrs	r3, r3, #16
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e011      	b.n	8002c3e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002c24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c28:	e009      	b.n	8002c3e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c38:	e001      	b.n	8002c3e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002c3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	371c      	adds	r7, #28
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd90      	pop	{r4, r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000008 	.word	0x20000008
 8002c4c:	10624dd3 	.word	0x10624dd3

08002c50 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8002c50:	b490      	push	{r4, r7}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002c58:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <SDMMC_GetCmdResp7+0x90>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a21      	ldr	r2, [pc, #132]	; (8002ce4 <SDMMC_GetCmdResp7+0x94>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	0a5b      	lsrs	r3, r3, #9
 8002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c68:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8002c6c:	4623      	mov	r3, r4
 8002c6e:	1e5c      	subs	r4, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002c74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c78:	e02c      	b.n	8002cd4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <SDMMC_GetCmdResp7+0x1c>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1eb      	bne.n	8002c6c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	e014      	b.n	8002cd4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d004      	beq.n	8002cc0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e009      	b.n	8002cd4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2240      	movs	r2, #64	; 0x40
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002cd2:	2300      	movs	r3, #0
  
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc90      	pop	{r4, r7}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000008 	.word	0x20000008
 8002ce4:	10624dd3 	.word	0x10624dd3

08002ce8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	4a08      	ldr	r2, [pc, #32]	; (8002d18 <disk_status+0x30>)
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	79fa      	ldrb	r2, [r7, #7]
 8002d00:	4905      	ldr	r1, [pc, #20]	; (8002d18 <disk_status+0x30>)
 8002d02:	440a      	add	r2, r1
 8002d04:	7a12      	ldrb	r2, [r2, #8]
 8002d06:	4610      	mov	r0, r2
 8002d08:	4798      	blx	r3
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20000050 	.word	0x20000050

08002d1c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <disk_initialize+0x48>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d111      	bne.n	8002d58 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	4a0b      	ldr	r2, [pc, #44]	; (8002d64 <disk_initialize+0x48>)
 8002d38:	2101      	movs	r1, #1
 8002d3a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	4a09      	ldr	r2, [pc, #36]	; (8002d64 <disk_initialize+0x48>)
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	79fa      	ldrb	r2, [r7, #7]
 8002d4a:	4906      	ldr	r1, [pc, #24]	; (8002d64 <disk_initialize+0x48>)
 8002d4c:	440a      	add	r2, r1
 8002d4e:	7a12      	ldrb	r2, [r2, #8]
 8002d50:	4610      	mov	r0, r2
 8002d52:	4798      	blx	r3
 8002d54:	4603      	mov	r3, r0
 8002d56:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000050 	.word	0x20000050

08002d68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	4603      	mov	r3, r0
 8002d76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <disk_read+0x3c>)
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	689c      	ldr	r4, [r3, #8]
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	4a07      	ldr	r2, [pc, #28]	; (8002da4 <disk_read+0x3c>)
 8002d88:	4413      	add	r3, r2
 8002d8a:	7a18      	ldrb	r0, [r3, #8]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	47a0      	blx	r4
 8002d94:	4603      	mov	r3, r0
 8002d96:	75fb      	strb	r3, [r7, #23]
  return res;
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd90      	pop	{r4, r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000050 	.word	0x20000050

08002da8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	603b      	str	r3, [r7, #0]
 8002db4:	4603      	mov	r3, r0
 8002db6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <disk_write+0x3c>)
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	68dc      	ldr	r4, [r3, #12]
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	4a07      	ldr	r2, [pc, #28]	; (8002de4 <disk_write+0x3c>)
 8002dc8:	4413      	add	r3, r2
 8002dca:	7a18      	ldrb	r0, [r3, #8]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	47a0      	blx	r4
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	75fb      	strb	r3, [r7, #23]
  return res;
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	371c      	adds	r7, #28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd90      	pop	{r4, r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000050 	.word	0x20000050

08002de8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	603a      	str	r2, [r7, #0]
 8002df2:	71fb      	strb	r3, [r7, #7]
 8002df4:	460b      	mov	r3, r1
 8002df6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	4a09      	ldr	r2, [pc, #36]	; (8002e20 <disk_ioctl+0x38>)
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	79fa      	ldrb	r2, [r7, #7]
 8002e06:	4906      	ldr	r1, [pc, #24]	; (8002e20 <disk_ioctl+0x38>)
 8002e08:	440a      	add	r2, r1
 8002e0a:	7a10      	ldrb	r0, [r2, #8]
 8002e0c:	79b9      	ldrb	r1, [r7, #6]
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	4798      	blx	r3
 8002e12:	4603      	mov	r3, r0
 8002e14:	73fb      	strb	r3, [r7, #15]
  return res;
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20000050 	.word	0x20000050

08002e24 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002e34:	89fb      	ldrh	r3, [r7, #14]
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	b21a      	sxth	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	b21b      	sxth	r3, r3
 8002e40:	4313      	orrs	r3, r2
 8002e42:	b21b      	sxth	r3, r3
 8002e44:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002e46:	89fb      	ldrh	r3, [r7, #14]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3303      	adds	r3, #3
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	3202      	adds	r2, #2
 8002e6c:	7812      	ldrb	r2, [r2, #0]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	021b      	lsls	r3, r3, #8
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	3201      	adds	r2, #1
 8002e7a:	7812      	ldrb	r2, [r2, #0]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	7812      	ldrb	r2, [r2, #0]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
	return rv;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	887a      	ldrh	r2, [r7, #2]
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	887a      	ldrh	r2, [r7, #2]
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	701a      	strb	r2, [r3, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	701a      	strb	r2, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	0a1b      	lsrs	r3, r3, #8
 8002eea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	701a      	strb	r2, [r3, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	0a1b      	lsrs	r3, r3, #8
 8002efc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	0a1b      	lsrs	r3, r3, #8
 8002f0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	607a      	str	r2, [r7, #4]
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	701a      	strb	r2, [r3, #0]
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00d      	beq.n	8002f5e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	1c53      	adds	r3, r2, #1
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	1c59      	adds	r1, r3, #1
 8002f4c:	6179      	str	r1, [r7, #20]
 8002f4e:	7812      	ldrb	r2, [r2, #0]
 8002f50:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f1      	bne.n	8002f42 <mem_cpy+0x1a>
	}
}
 8002f5e:	bf00      	nop
 8002f60:	371c      	adds	r7, #28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002f6a:	b480      	push	{r7}
 8002f6c:	b087      	sub	sp, #28
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	617a      	str	r2, [r7, #20]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	607b      	str	r3, [r7, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f3      	bne.n	8002f7a <mem_set+0x10>
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8002f9e:	b480      	push	{r7}
 8002fa0:	b089      	sub	sp, #36	; 0x24
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	61fa      	str	r2, [r7, #28]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	61ba      	str	r2, [r7, #24]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	1acb      	subs	r3, r1, r3
 8002fca:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <mem_cmp+0x40>
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0eb      	beq.n	8002fb6 <mem_cmp+0x18>

	return r;
 8002fde:	697b      	ldr	r3, [r7, #20]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3724      	adds	r7, #36	; 0x24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002ff6:	e002      	b.n	8002ffe <chk_chr+0x12>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <chk_chr+0x26>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	4293      	cmp	r3, r2
 8003010:	d1f2      	bne.n	8002ff8 <chk_chr+0xc>
	return *str;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	781b      	ldrb	r3, [r3, #0]
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	e029      	b.n	800308c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003038:	4a27      	ldr	r2, [pc, #156]	; (80030d8 <chk_lock+0xb4>)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	4413      	add	r3, r2
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01d      	beq.n	8003082 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003046:	4a24      	ldr	r2, [pc, #144]	; (80030d8 <chk_lock+0xb4>)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	4413      	add	r3, r2
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d116      	bne.n	8003086 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003058:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <chk_lock+0xb4>)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	4413      	add	r3, r2
 8003060:	3304      	adds	r3, #4
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003068:	429a      	cmp	r2, r3
 800306a:	d10c      	bne.n	8003086 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800306c:	4a1a      	ldr	r2, [pc, #104]	; (80030d8 <chk_lock+0xb4>)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	4413      	add	r3, r2
 8003074:	3308      	adds	r3, #8
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800307c:	429a      	cmp	r2, r3
 800307e:	d102      	bne.n	8003086 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003080:	e007      	b.n	8003092 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003082:	2301      	movs	r3, #1
 8003084:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3301      	adds	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d9d2      	bls.n	8003038 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d109      	bne.n	80030ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d102      	bne.n	80030a4 <chk_lock+0x80>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d101      	bne.n	80030a8 <chk_lock+0x84>
 80030a4:	2300      	movs	r3, #0
 80030a6:	e010      	b.n	80030ca <chk_lock+0xa6>
 80030a8:	2312      	movs	r3, #18
 80030aa:	e00e      	b.n	80030ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d108      	bne.n	80030c4 <chk_lock+0xa0>
 80030b2:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <chk_lock+0xb4>)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	4413      	add	r3, r2
 80030ba:	330c      	adds	r3, #12
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c2:	d101      	bne.n	80030c8 <chk_lock+0xa4>
 80030c4:	2310      	movs	r3, #16
 80030c6:	e000      	b.n	80030ca <chk_lock+0xa6>
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000030 	.word	0x20000030

080030dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	e002      	b.n	80030ee <enq_lock+0x12>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3301      	adds	r3, #1
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d806      	bhi.n	8003102 <enq_lock+0x26>
 80030f4:	4a09      	ldr	r2, [pc, #36]	; (800311c <enq_lock+0x40>)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	4413      	add	r3, r2
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f2      	bne.n	80030e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b02      	cmp	r3, #2
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
}
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000030 	.word	0x20000030

08003120 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	e01f      	b.n	8003170 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003130:	4a41      	ldr	r2, [pc, #260]	; (8003238 <inc_lock+0x118>)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	4413      	add	r3, r2
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d113      	bne.n	800316a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003142:	4a3d      	ldr	r2, [pc, #244]	; (8003238 <inc_lock+0x118>)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	4413      	add	r3, r2
 800314a:	3304      	adds	r3, #4
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003152:	429a      	cmp	r2, r3
 8003154:	d109      	bne.n	800316a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003156:	4a38      	ldr	r2, [pc, #224]	; (8003238 <inc_lock+0x118>)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	4413      	add	r3, r2
 800315e:	3308      	adds	r3, #8
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003166:	429a      	cmp	r2, r3
 8003168:	d006      	beq.n	8003178 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	3301      	adds	r3, #1
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d9dc      	bls.n	8003130 <inc_lock+0x10>
 8003176:	e000      	b.n	800317a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003178:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d132      	bne.n	80031e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	e002      	b.n	800318c <inc_lock+0x6c>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3301      	adds	r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d806      	bhi.n	80031a0 <inc_lock+0x80>
 8003192:	4a29      	ldr	r2, [pc, #164]	; (8003238 <inc_lock+0x118>)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	4413      	add	r3, r2
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f2      	bne.n	8003186 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d101      	bne.n	80031aa <inc_lock+0x8a>
 80031a6:	2300      	movs	r3, #0
 80031a8:	e040      	b.n	800322c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4922      	ldr	r1, [pc, #136]	; (8003238 <inc_lock+0x118>)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	440b      	add	r3, r1
 80031b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	491e      	ldr	r1, [pc, #120]	; (8003238 <inc_lock+0x118>)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	440b      	add	r3, r1
 80031c4:	3304      	adds	r3, #4
 80031c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	491a      	ldr	r1, [pc, #104]	; (8003238 <inc_lock+0x118>)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	440b      	add	r3, r1
 80031d4:	3308      	adds	r3, #8
 80031d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80031d8:	4a17      	ldr	r2, [pc, #92]	; (8003238 <inc_lock+0x118>)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	4413      	add	r3, r2
 80031e0:	330c      	adds	r3, #12
 80031e2:	2200      	movs	r2, #0
 80031e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d009      	beq.n	8003200 <inc_lock+0xe0>
 80031ec:	4a12      	ldr	r2, [pc, #72]	; (8003238 <inc_lock+0x118>)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	4413      	add	r3, r2
 80031f4:	330c      	adds	r3, #12
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <inc_lock+0xe0>
 80031fc:	2300      	movs	r3, #0
 80031fe:	e015      	b.n	800322c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d108      	bne.n	8003218 <inc_lock+0xf8>
 8003206:	4a0c      	ldr	r2, [pc, #48]	; (8003238 <inc_lock+0x118>)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	4413      	add	r3, r2
 800320e:	330c      	adds	r3, #12
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	3301      	adds	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	e001      	b.n	800321c <inc_lock+0xfc>
 8003218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800321c:	4906      	ldr	r1, [pc, #24]	; (8003238 <inc_lock+0x118>)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	440b      	add	r3, r1
 8003224:	330c      	adds	r3, #12
 8003226:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3301      	adds	r3, #1
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	20000030 	.word	0x20000030

0800323c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3b01      	subs	r3, #1
 8003248:	607b      	str	r3, [r7, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d825      	bhi.n	800329c <dec_lock+0x60>
		n = Files[i].ctr;
 8003250:	4a17      	ldr	r2, [pc, #92]	; (80032b0 <dec_lock+0x74>)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	4413      	add	r3, r2
 8003258:	330c      	adds	r3, #12
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800325e:	89fb      	ldrh	r3, [r7, #14]
 8003260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003264:	d101      	bne.n	800326a <dec_lock+0x2e>
 8003266:	2300      	movs	r3, #0
 8003268:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800326a:	89fb      	ldrh	r3, [r7, #14]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <dec_lock+0x3a>
 8003270:	89fb      	ldrh	r3, [r7, #14]
 8003272:	3b01      	subs	r3, #1
 8003274:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003276:	4a0e      	ldr	r2, [pc, #56]	; (80032b0 <dec_lock+0x74>)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	4413      	add	r3, r2
 800327e:	330c      	adds	r3, #12
 8003280:	89fa      	ldrh	r2, [r7, #14]
 8003282:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003284:	89fb      	ldrh	r3, [r7, #14]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d105      	bne.n	8003296 <dec_lock+0x5a>
 800328a:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <dec_lock+0x74>)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	4413      	add	r3, r2
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	737b      	strb	r3, [r7, #13]
 800329a:	e001      	b.n	80032a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800329c:	2302      	movs	r3, #2
 800329e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80032a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20000030 	.word	0x20000030

080032b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	e010      	b.n	80032e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80032c2:	4a0d      	ldr	r2, [pc, #52]	; (80032f8 <clear_lock+0x44>)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	4413      	add	r3, r2
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d105      	bne.n	80032de <clear_lock+0x2a>
 80032d2:	4a09      	ldr	r2, [pc, #36]	; (80032f8 <clear_lock+0x44>)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	4413      	add	r3, r2
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3301      	adds	r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d9eb      	bls.n	80032c2 <clear_lock+0xe>
	}
}
 80032ea:	bf00      	nop
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000030 	.word	0x20000030

080032fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	78db      	ldrb	r3, [r3, #3]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d034      	beq.n	800337a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	7858      	ldrb	r0, [r3, #1]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003320:	2301      	movs	r3, #1
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	f7ff fd40 	bl	8002da8 <disk_write>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <sync_window+0x38>
			res = FR_DISK_ERR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
 8003332:	e022      	b.n	800337a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	1ad2      	subs	r2, r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	429a      	cmp	r2, r3
 8003348:	d217      	bcs.n	800337a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	789b      	ldrb	r3, [r3, #2]
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	e010      	b.n	8003374 <sync_window+0x78>
					wsect += fs->fsize;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4413      	add	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	7858      	ldrb	r0, [r3, #1]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003366:	2301      	movs	r3, #1
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	f7ff fd1d 	bl	8002da8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	3b01      	subs	r3, #1
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d8eb      	bhi.n	8003352 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800337a:	7bfb      	ldrb	r3, [r7, #15]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d01b      	beq.n	80033d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff ffad 	bl	80032fc <sync_window>
 80033a2:	4603      	mov	r3, r0
 80033a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d113      	bne.n	80033d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	7858      	ldrb	r0, [r3, #1]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80033b6:	2301      	movs	r3, #1
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	f7ff fcd5 	bl	8002d68 <disk_read>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d004      	beq.n	80033ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80033c4:	f04f 33ff 	mov.w	r3, #4294967295
 80033c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff ff87 	bl	80032fc <sync_window>
 80033ee:	4603      	mov	r3, r0
 80033f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d159      	bne.n	80034ac <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d149      	bne.n	8003494 <sync_fs+0xb4>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	791b      	ldrb	r3, [r3, #4]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d145      	bne.n	8003494 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	899b      	ldrh	r3, [r3, #12]
 8003412:	461a      	mov	r2, r3
 8003414:	2100      	movs	r1, #0
 8003416:	f7ff fda8 	bl	8002f6a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3334      	adds	r3, #52	; 0x34
 800341e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003422:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fd37 	bl	8002e9a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3334      	adds	r3, #52	; 0x34
 8003430:	4921      	ldr	r1, [pc, #132]	; (80034b8 <sync_fs+0xd8>)
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fd4c 	bl	8002ed0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3334      	adds	r3, #52	; 0x34
 800343c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003440:	491e      	ldr	r1, [pc, #120]	; (80034bc <sync_fs+0xdc>)
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fd44 	bl	8002ed0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3334      	adds	r3, #52	; 0x34
 800344c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f7ff fd3a 	bl	8002ed0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3334      	adds	r3, #52	; 0x34
 8003460:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	4619      	mov	r1, r3
 800346a:	4610      	mov	r0, r2
 800346c:	f7ff fd30 	bl	8002ed0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	7858      	ldrb	r0, [r3, #1]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003488:	2301      	movs	r3, #1
 800348a:	f7ff fc8d 	bl	8002da8 <disk_write>
			fs->fsi_flag = 0;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	785b      	ldrb	r3, [r3, #1]
 8003498:	2200      	movs	r2, #0
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fca3 	bl	8002de8 <disk_ioctl>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <sync_fs+0xcc>
 80034a8:	2301      	movs	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	41615252 	.word	0x41615252
 80034bc:	61417272 	.word	0x61417272

080034c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	3b02      	subs	r3, #2
 80034ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	3b02      	subs	r3, #2
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d301      	bcc.n	80034e0 <clust2sect+0x20>
 80034dc:	2300      	movs	r3, #0
 80034de:	e008      	b.n	80034f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	895b      	ldrh	r3, [r3, #10]
 80034e4:	461a      	mov	r2, r3
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	fb03 f202 	mul.w	r2, r3, r2
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	4413      	add	r3, r2
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b086      	sub	sp, #24
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d904      	bls.n	800351e <get_fat+0x20>
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d302      	bcc.n	8003524 <get_fat+0x26>
		val = 1;	/* Internal error */
 800351e:	2301      	movs	r3, #1
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	e0b7      	b.n	8003694 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003524:	f04f 33ff 	mov.w	r3, #4294967295
 8003528:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d05a      	beq.n	80035e8 <get_fat+0xea>
 8003532:	2b03      	cmp	r3, #3
 8003534:	d07d      	beq.n	8003632 <get_fat+0x134>
 8003536:	2b01      	cmp	r3, #1
 8003538:	f040 80a2 	bne.w	8003680 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	085b      	lsrs	r3, r3, #1
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	899b      	ldrh	r3, [r3, #12]
 8003552:	4619      	mov	r1, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	fbb3 f3f1 	udiv	r3, r3, r1
 800355a:	4413      	add	r3, r2
 800355c:	4619      	mov	r1, r3
 800355e:	6938      	ldr	r0, [r7, #16]
 8003560:	f7ff ff10 	bl	8003384 <move_window>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	f040 808d 	bne.w	8003686 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	60fa      	str	r2, [r7, #12]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	8992      	ldrh	r2, [r2, #12]
 8003576:	fbb3 f1f2 	udiv	r1, r3, r2
 800357a:	fb02 f201 	mul.w	r2, r2, r1
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4413      	add	r3, r2
 8003584:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003588:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	899b      	ldrh	r3, [r3, #12]
 8003592:	4619      	mov	r1, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	fbb3 f3f1 	udiv	r3, r3, r1
 800359a:	4413      	add	r3, r2
 800359c:	4619      	mov	r1, r3
 800359e:	6938      	ldr	r0, [r7, #16]
 80035a0:	f7ff fef0 	bl	8003384 <move_window>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d16f      	bne.n	800368a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	899b      	ldrh	r3, [r3, #12]
 80035ae:	461a      	mov	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80035b6:	fb02 f201 	mul.w	r2, r2, r1
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4413      	add	r3, r2
 80035c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	461a      	mov	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <get_fat+0xe0>
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	091b      	lsrs	r3, r3, #4
 80035dc:	e002      	b.n	80035e4 <get_fat+0xe6>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e4:	617b      	str	r3, [r7, #20]
			break;
 80035e6:	e055      	b.n	8003694 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	899b      	ldrh	r3, [r3, #12]
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	4619      	mov	r1, r3
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80035fc:	4413      	add	r3, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	6938      	ldr	r0, [r7, #16]
 8003602:	f7ff febf 	bl	8003384 <move_window>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d140      	bne.n	800368e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	8992      	ldrh	r2, [r2, #12]
 800361a:	fbb3 f0f2 	udiv	r0, r3, r2
 800361e:	fb02 f200 	mul.w	r2, r2, r0
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	440b      	add	r3, r1
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fbfc 	bl	8002e24 <ld_word>
 800362c:	4603      	mov	r3, r0
 800362e:	617b      	str	r3, [r7, #20]
			break;
 8003630:	e030      	b.n	8003694 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	899b      	ldrh	r3, [r3, #12]
 800363a:	089b      	lsrs	r3, r3, #2
 800363c:	b29b      	uxth	r3, r3
 800363e:	4619      	mov	r1, r3
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	fbb3 f3f1 	udiv	r3, r3, r1
 8003646:	4413      	add	r3, r2
 8003648:	4619      	mov	r1, r3
 800364a:	6938      	ldr	r0, [r7, #16]
 800364c:	f7ff fe9a 	bl	8003384 <move_window>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d11d      	bne.n	8003692 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	8992      	ldrh	r2, [r2, #12]
 8003664:	fbb3 f0f2 	udiv	r0, r3, r2
 8003668:	fb02 f200 	mul.w	r2, r2, r0
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	440b      	add	r3, r1
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fbef 	bl	8002e54 <ld_dword>
 8003676:	4603      	mov	r3, r0
 8003678:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800367c:	617b      	str	r3, [r7, #20]
			break;
 800367e:	e009      	b.n	8003694 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003680:	2301      	movs	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	e006      	b.n	8003694 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003686:	bf00      	nop
 8003688:	e004      	b.n	8003694 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800368a:	bf00      	nop
 800368c:	e002      	b.n	8003694 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800368e:	bf00      	nop
 8003690:	e000      	b.n	8003694 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003692:	bf00      	nop
		}
	}

	return val;
 8003694:	697b      	ldr	r3, [r7, #20]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800369e:	b590      	push	{r4, r7, lr}
 80036a0:	b089      	sub	sp, #36	; 0x24
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80036aa:	2302      	movs	r3, #2
 80036ac:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	f240 8106 	bls.w	80038c2 <put_fat+0x224>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	429a      	cmp	r2, r3
 80036be:	f080 8100 	bcs.w	80038c2 <put_fat+0x224>
		switch (fs->fs_type) {
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	f000 8088 	beq.w	80037dc <put_fat+0x13e>
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	f000 80b0 	beq.w	8003832 <put_fat+0x194>
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	f040 80f5 	bne.w	80038c2 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	61bb      	str	r3, [r7, #24]
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	085b      	lsrs	r3, r3, #1
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4413      	add	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	899b      	ldrh	r3, [r3, #12]
 80036ee:	4619      	mov	r1, r3
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80036f6:	4413      	add	r3, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f7ff fe42 	bl	8003384 <move_window>
 8003700:	4603      	mov	r3, r0
 8003702:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003704:	7ffb      	ldrb	r3, [r7, #31]
 8003706:	2b00      	cmp	r3, #0
 8003708:	f040 80d4 	bne.w	80038b4 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	61ba      	str	r2, [r7, #24]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	8992      	ldrh	r2, [r2, #12]
 800371c:	fbb3 f0f2 	udiv	r0, r3, r2
 8003720:	fb02 f200 	mul.w	r2, r2, r0
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	440b      	add	r3, r1
 8003728:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00d      	beq.n	8003750 <put_fat+0xb2>
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	b25b      	sxtb	r3, r3
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	b25a      	sxtb	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	b25b      	sxtb	r3, r3
 8003748:	4313      	orrs	r3, r2
 800374a:	b25b      	sxtb	r3, r3
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e001      	b.n	8003754 <put_fat+0xb6>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	899b      	ldrh	r3, [r3, #12]
 8003766:	4619      	mov	r1, r3
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	fbb3 f3f1 	udiv	r3, r3, r1
 800376e:	4413      	add	r3, r2
 8003770:	4619      	mov	r1, r3
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f7ff fe06 	bl	8003384 <move_window>
 8003778:	4603      	mov	r3, r0
 800377a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800377c:	7ffb      	ldrb	r3, [r7, #31]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f040 809a 	bne.w	80038b8 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	899b      	ldrh	r3, [r3, #12]
 800378e:	461a      	mov	r2, r3
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	fbb3 f0f2 	udiv	r0, r3, r2
 8003796:	fb02 f200 	mul.w	r2, r2, r0
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	440b      	add	r3, r1
 800379e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <put_fat+0x114>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	e00e      	b.n	80037d0 <put_fat+0x132>
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	b25b      	sxtb	r3, r3
 80037b8:	f023 030f 	bic.w	r3, r3, #15
 80037bc:	b25a      	sxtb	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	0a1b      	lsrs	r3, r3, #8
 80037c2:	b25b      	sxtb	r3, r3
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	b25b      	sxtb	r3, r3
 80037ca:	4313      	orrs	r3, r2
 80037cc:	b25b      	sxtb	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	70da      	strb	r2, [r3, #3]
			break;
 80037da:	e072      	b.n	80038c2 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	899b      	ldrh	r3, [r3, #12]
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	4619      	mov	r1, r3
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80037f0:	4413      	add	r3, r2
 80037f2:	4619      	mov	r1, r3
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f7ff fdc5 	bl	8003384 <move_window>
 80037fa:	4603      	mov	r3, r0
 80037fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80037fe:	7ffb      	ldrb	r3, [r7, #31]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d15b      	bne.n	80038bc <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	8992      	ldrh	r2, [r2, #12]
 8003812:	fbb3 f0f2 	udiv	r0, r3, r2
 8003816:	fb02 f200 	mul.w	r2, r2, r0
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	440b      	add	r3, r1
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	b292      	uxth	r2, r2
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff fb38 	bl	8002e9a <st_word>
			fs->wflag = 1;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	70da      	strb	r2, [r3, #3]
			break;
 8003830:	e047      	b.n	80038c2 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	899b      	ldrh	r3, [r3, #12]
 800383a:	089b      	lsrs	r3, r3, #2
 800383c:	b29b      	uxth	r3, r3
 800383e:	4619      	mov	r1, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	fbb3 f3f1 	udiv	r3, r3, r1
 8003846:	4413      	add	r3, r2
 8003848:	4619      	mov	r1, r3
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f7ff fd9a 	bl	8003384 <move_window>
 8003850:	4603      	mov	r3, r0
 8003852:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003854:	7ffb      	ldrb	r3, [r7, #31]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d132      	bne.n	80038c0 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	8992      	ldrh	r2, [r2, #12]
 800386e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003872:	fb02 f200 	mul.w	r2, r2, r0
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	440b      	add	r3, r1
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff faea 	bl	8002e54 <ld_dword>
 8003880:	4603      	mov	r3, r0
 8003882:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003886:	4323      	orrs	r3, r4
 8003888:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	8992      	ldrh	r2, [r2, #12]
 8003898:	fbb3 f0f2 	udiv	r0, r3, r2
 800389c:	fb02 f200 	mul.w	r2, r2, r0
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	440b      	add	r3, r1
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fb12 	bl	8002ed0 <st_dword>
			fs->wflag = 1;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2201      	movs	r2, #1
 80038b0:	70da      	strb	r2, [r3, #3]
			break;
 80038b2:	e006      	b.n	80038c2 <put_fat+0x224>
			if (res != FR_OK) break;
 80038b4:	bf00      	nop
 80038b6:	e004      	b.n	80038c2 <put_fat+0x224>
			if (res != FR_OK) break;
 80038b8:	bf00      	nop
 80038ba:	e002      	b.n	80038c2 <put_fat+0x224>
			if (res != FR_OK) break;
 80038bc:	bf00      	nop
 80038be:	e000      	b.n	80038c2 <put_fat+0x224>
			if (res != FR_OK) break;
 80038c0:	bf00      	nop
		}
	}
	return res;
 80038c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3724      	adds	r7, #36	; 0x24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd90      	pop	{r4, r7, pc}

080038cc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d904      	bls.n	80038f2 <remove_chain+0x26>
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d301      	bcc.n	80038f6 <remove_chain+0x2a>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e04b      	b.n	800398e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00c      	beq.n	8003916 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80038fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	69b8      	ldr	r0, [r7, #24]
 8003904:	f7ff fecb 	bl	800369e <put_fat>
 8003908:	4603      	mov	r3, r0
 800390a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800390c:	7ffb      	ldrb	r3, [r7, #31]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <remove_chain+0x4a>
 8003912:	7ffb      	ldrb	r3, [r7, #31]
 8003914:	e03b      	b.n	800398e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f7ff fdf0 	bl	80034fe <get_fat>
 800391e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d031      	beq.n	800398a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <remove_chain+0x64>
 800392c:	2302      	movs	r3, #2
 800392e:	e02e      	b.n	800398e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003936:	d101      	bne.n	800393c <remove_chain+0x70>
 8003938:	2301      	movs	r3, #1
 800393a:	e028      	b.n	800398e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800393c:	2200      	movs	r2, #0
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	69b8      	ldr	r0, [r7, #24]
 8003942:	f7ff feac 	bl	800369e <put_fat>
 8003946:	4603      	mov	r3, r0
 8003948:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800394a:	7ffb      	ldrb	r3, [r7, #31]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <remove_chain+0x88>
 8003950:	7ffb      	ldrb	r3, [r7, #31]
 8003952:	e01c      	b.n	800398e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	3b02      	subs	r3, #2
 800395e:	429a      	cmp	r2, r3
 8003960:	d20b      	bcs.n	800397a <remove_chain+0xae>
			fs->free_clst++;
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	791b      	ldrb	r3, [r3, #4]
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	b2da      	uxtb	r2, r3
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	429a      	cmp	r2, r3
 8003986:	d3c6      	bcc.n	8003916 <remove_chain+0x4a>
 8003988:	e000      	b.n	800398c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800398a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b088      	sub	sp, #32
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10d      	bne.n	80039c8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d004      	beq.n	80039c2 <create_chain+0x2c>
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d31b      	bcc.n	80039fa <create_chain+0x64>
 80039c2:	2301      	movs	r3, #1
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	e018      	b.n	80039fa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80039c8:	6839      	ldr	r1, [r7, #0]
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff fd97 	bl	80034fe <get_fat>
 80039d0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d801      	bhi.n	80039dc <create_chain+0x46>
 80039d8:	2301      	movs	r3, #1
 80039da:	e070      	b.n	8003abe <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e2:	d101      	bne.n	80039e8 <create_chain+0x52>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	e06a      	b.n	8003abe <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d201      	bcs.n	80039f6 <create_chain+0x60>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	e063      	b.n	8003abe <create_chain+0x128>
		scl = clst;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3301      	adds	r3, #1
 8003a02:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d307      	bcc.n	8003a1e <create_chain+0x88>
				ncl = 2;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d901      	bls.n	8003a1e <create_chain+0x88>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e04f      	b.n	8003abe <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003a1e:	69f9      	ldr	r1, [r7, #28]
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff fd6c 	bl	80034fe <get_fat>
 8003a26:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00e      	beq.n	8003a4c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d003      	beq.n	8003a3c <create_chain+0xa6>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3a:	d101      	bne.n	8003a40 <create_chain+0xaa>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	e03e      	b.n	8003abe <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d1da      	bne.n	80039fe <create_chain+0x68>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	e038      	b.n	8003abe <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003a4c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a52:	69f9      	ldr	r1, [r7, #28]
 8003a54:	6938      	ldr	r0, [r7, #16]
 8003a56:	f7ff fe22 	bl	800369e <put_fat>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003a5e:	7dfb      	ldrb	r3, [r7, #23]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <create_chain+0xe2>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003a6a:	69fa      	ldr	r2, [r7, #28]
 8003a6c:	6839      	ldr	r1, [r7, #0]
 8003a6e:	6938      	ldr	r0, [r7, #16]
 8003a70:	f7ff fe15 	bl	800369e <put_fat>
 8003a74:	4603      	mov	r3, r0
 8003a76:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d116      	bne.n	8003aac <create_chain+0x116>
		fs->last_clst = ncl;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	695a      	ldr	r2, [r3, #20]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	3b02      	subs	r3, #2
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d804      	bhi.n	8003a9c <create_chain+0x106>
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	1e5a      	subs	r2, r3, #1
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	791b      	ldrb	r3, [r3, #4]
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	711a      	strb	r2, [r3, #4]
 8003aaa:	e007      	b.n	8003abc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d102      	bne.n	8003ab8 <create_chain+0x122>
 8003ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab6:	e000      	b.n	8003aba <create_chain+0x124>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003abc:	69fb      	ldr	r3, [r7, #28]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b087      	sub	sp, #28
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	3304      	adds	r3, #4
 8003adc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	899b      	ldrh	r3, [r3, #12]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	8952      	ldrh	r2, [r2, #10]
 8003aee:	fbb3 f3f2 	udiv	r3, r3, r2
 8003af2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1d1a      	adds	r2, r3, #4
 8003af8:	613a      	str	r2, [r7, #16]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <clmt_clust+0x42>
 8003b04:	2300      	movs	r3, #0
 8003b06:	e010      	b.n	8003b2a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d307      	bcc.n	8003b20 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003b1e:	e7e9      	b.n	8003af4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8003b20:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	4413      	add	r3, r2
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	371c      	adds	r7, #28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b086      	sub	sp, #24
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b4c:	d204      	bcs.n	8003b58 <dir_sdi+0x22>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <dir_sdi+0x26>
		return FR_INT_ERR;
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e071      	b.n	8003c40 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <dir_sdi+0x46>
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d902      	bls.n	8003b7c <dir_sdi+0x46>
		clst = fs->dirbase;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10c      	bne.n	8003b9c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	8912      	ldrh	r2, [r2, #8]
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d301      	bcc.n	8003b92 <dir_sdi+0x5c>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e056      	b.n	8003c40 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	61da      	str	r2, [r3, #28]
 8003b9a:	e02d      	b.n	8003bf8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	895b      	ldrh	r3, [r3, #10]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	899b      	ldrh	r3, [r3, #12]
 8003ba6:	fb03 f302 	mul.w	r3, r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003bac:	e019      	b.n	8003be2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6979      	ldr	r1, [r7, #20]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff fca3 	bl	80034fe <get_fat>
 8003bb8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc0:	d101      	bne.n	8003bc6 <dir_sdi+0x90>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e03c      	b.n	8003c40 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d904      	bls.n	8003bd6 <dir_sdi+0xa0>
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d301      	bcc.n	8003bda <dir_sdi+0xa4>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e032      	b.n	8003c40 <dir_sdi+0x10a>
			ofs -= csz;
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d2e1      	bcs.n	8003bae <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8003bea:	6979      	ldr	r1, [r7, #20]
 8003bec:	6938      	ldr	r0, [r7, #16]
 8003bee:	f7ff fc67 	bl	80034c0 <clust2sect>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <dir_sdi+0xd4>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e01a      	b.n	8003c40 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69da      	ldr	r2, [r3, #28]
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	899b      	ldrh	r3, [r3, #12]
 8003c12:	4619      	mov	r1, r3
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c1a:	441a      	add	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	899b      	ldrh	r3, [r3, #12]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003c32:	fb02 f200 	mul.w	r2, r2, r0
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	18ca      	adds	r2, r1, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	3320      	adds	r3, #32
 8003c5e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <dir_next+0x28>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c6e:	d301      	bcc.n	8003c74 <dir_next+0x2c>
 8003c70:	2304      	movs	r3, #4
 8003c72:	e0bb      	b.n	8003dec <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	899b      	ldrh	r3, [r3, #12]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c80:	fb02 f201 	mul.w	r2, r2, r1
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f040 809d 	bne.w	8003dc6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10b      	bne.n	8003cb6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	8912      	ldrh	r2, [r2, #8]
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	f0c0 808d 	bcc.w	8003dc6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	61da      	str	r2, [r3, #28]
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	e09a      	b.n	8003dec <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	899b      	ldrh	r3, [r3, #12]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	8952      	ldrh	r2, [r2, #10]
 8003cc6:	3a01      	subs	r2, #1
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d17b      	bne.n	8003dc6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	f7ff fc11 	bl	80034fe <get_fat>
 8003cdc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d801      	bhi.n	8003ce8 <dir_next+0xa0>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e081      	b.n	8003dec <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cee:	d101      	bne.n	8003cf4 <dir_next+0xac>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e07b      	b.n	8003dec <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d359      	bcc.n	8003db2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d104      	bne.n	8003d0e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	61da      	str	r2, [r3, #28]
 8003d0a:	2304      	movs	r3, #4
 8003d0c:	e06e      	b.n	8003dec <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f7ff fe3d 	bl	8003996 <create_chain>
 8003d1c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <dir_next+0xe0>
 8003d24:	2307      	movs	r3, #7
 8003d26:	e061      	b.n	8003dec <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <dir_next+0xea>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e05c      	b.n	8003dec <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d38:	d101      	bne.n	8003d3e <dir_next+0xf6>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e056      	b.n	8003dec <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f7ff fadc 	bl	80032fc <sync_window>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <dir_next+0x106>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e04e      	b.n	8003dec <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	899b      	ldrh	r3, [r3, #12]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	f7ff f905 	bl	8002f6a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003d60:	2300      	movs	r3, #0
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	6979      	ldr	r1, [r7, #20]
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f7ff fbaa 	bl	80034c0 <clust2sect>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	631a      	str	r2, [r3, #48]	; 0x30
 8003d72:	e012      	b.n	8003d9a <dir_next+0x152>
						fs->wflag = 1;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2201      	movs	r2, #1
 8003d78:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f7ff fabe 	bl	80032fc <sync_window>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <dir_next+0x142>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e030      	b.n	8003dec <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	895b      	ldrh	r3, [r3, #10]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d3e6      	bcc.n	8003d74 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad2      	subs	r2, r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003db8:	6979      	ldr	r1, [r7, #20]
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7ff fb80 	bl	80034c0 <clust2sect>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	899b      	ldrh	r3, [r3, #12]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	fbb3 f0f2 	udiv	r0, r3, r2
 8003dde:	fb02 f200 	mul.w	r2, r2, r0
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	18ca      	adds	r2, r1, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003e04:	2100      	movs	r1, #0
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff fe95 	bl	8003b36 <dir_sdi>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d12b      	bne.n	8003e6e <dir_alloc+0x7a>
		n = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	4619      	mov	r1, r3
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f7ff faaf 	bl	8003384 <move_window>
 8003e26:	4603      	mov	r3, r0
 8003e28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d11d      	bne.n	8003e6c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2be5      	cmp	r3, #229	; 0xe5
 8003e38:	d004      	beq.n	8003e44 <dir_alloc+0x50>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d107      	bne.n	8003e54 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	3301      	adds	r3, #1
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d102      	bne.n	8003e58 <dir_alloc+0x64>
 8003e52:	e00c      	b.n	8003e6e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003e54:	2300      	movs	r3, #0
 8003e56:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8003e58:	2101      	movs	r1, #1
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff fef4 	bl	8003c48 <dir_next>
 8003e60:	4603      	mov	r3, r0
 8003e62:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0d7      	beq.n	8003e1a <dir_alloc+0x26>
 8003e6a:	e000      	b.n	8003e6e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8003e6c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003e6e:	7dfb      	ldrb	r3, [r7, #23]
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d101      	bne.n	8003e78 <dir_alloc+0x84>
 8003e74:	2307      	movs	r3, #7
 8003e76:	75fb      	strb	r3, [r7, #23]
	return res;
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	331a      	adds	r3, #26
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fe ffc7 	bl	8002e24 <ld_word>
 8003e96:	4603      	mov	r3, r0
 8003e98:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d109      	bne.n	8003eb6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	3314      	adds	r3, #20
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe ffbc 	bl	8002e24 <ld_word>
 8003eac:	4603      	mov	r3, r0
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	331a      	adds	r3, #26
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	b292      	uxth	r2, r2
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe ffdf 	bl	8002e9a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d109      	bne.n	8003ef8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f103 0214 	add.w	r2, r3, #20
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	0c1b      	lsrs	r3, r3, #16
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	f7fe ffd1 	bl	8002e9a <st_word>
	}
}
 8003ef8:	bf00      	nop
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003f0e:	2100      	movs	r1, #0
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff fe10 	bl	8003b36 <dir_sdi>
 8003f16:	4603      	mov	r3, r0
 8003f18:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <dir_find+0x24>
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	e03e      	b.n	8003fa2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	6938      	ldr	r0, [r7, #16]
 8003f2c:	f7ff fa2a 	bl	8003384 <move_window>
 8003f30:	4603      	mov	r3, r0
 8003f32:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d12f      	bne.n	8003f9a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <dir_find+0x4e>
 8003f48:	2304      	movs	r3, #4
 8003f4a:	75fb      	strb	r3, [r7, #23]
 8003f4c:	e028      	b.n	8003fa0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	330b      	adds	r3, #11
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	330b      	adds	r3, #11
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10a      	bne.n	8003f86 <dir_find+0x86>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a18      	ldr	r0, [r3, #32]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3324      	adds	r3, #36	; 0x24
 8003f78:	220b      	movs	r2, #11
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f7ff f80f 	bl	8002f9e <mem_cmp>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8003f86:	2100      	movs	r1, #0
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff fe5d 	bl	8003c48 <dir_next>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003f92:	7dfb      	ldrb	r3, [r7, #23]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0c5      	beq.n	8003f24 <dir_find+0x24>
 8003f98:	e002      	b.n	8003fa0 <dir_find+0xa0>
		if (res != FR_OK) break;
 8003f9a:	bf00      	nop
 8003f9c:	e000      	b.n	8003fa0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003f9e:	bf00      	nop

	return res;
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8003fb8:	2101      	movs	r1, #1
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff ff1a 	bl	8003df4 <dir_alloc>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d11c      	bne.n	8004004 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	4619      	mov	r1, r3
 8003fd0:	68b8      	ldr	r0, [r7, #8]
 8003fd2:	f7ff f9d7 	bl	8003384 <move_window>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d111      	bne.n	8004004 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe ffbe 	bl	8002f6a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a18      	ldr	r0, [r3, #32]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3324      	adds	r3, #36	; 0x24
 8003ff6:	220b      	movs	r2, #11
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f7fe ff95 	bl	8002f28 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2201      	movs	r2, #1
 8004002:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004004:	7bfb      	ldrb	r3, [r7, #15]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3324      	adds	r3, #36	; 0x24
 8004024:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004026:	220b      	movs	r2, #11
 8004028:	2120      	movs	r1, #32
 800402a:	68b8      	ldr	r0, [r7, #8]
 800402c:	f7fe ff9d 	bl	8002f6a <mem_set>
	si = i = 0; ni = 8;
 8004030:	2300      	movs	r3, #0
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	2308      	movs	r3, #8
 800403a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	617a      	str	r2, [r7, #20]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4413      	add	r3, r2
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800404a:	7ffb      	ldrb	r3, [r7, #31]
 800404c:	2b20      	cmp	r3, #32
 800404e:	d94e      	bls.n	80040ee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004050:	7ffb      	ldrb	r3, [r7, #31]
 8004052:	2b2f      	cmp	r3, #47	; 0x2f
 8004054:	d006      	beq.n	8004064 <create_name+0x54>
 8004056:	7ffb      	ldrb	r3, [r7, #31]
 8004058:	2b5c      	cmp	r3, #92	; 0x5c
 800405a:	d110      	bne.n	800407e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800405c:	e002      	b.n	8004064 <create_name+0x54>
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	3301      	adds	r3, #1
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	4413      	add	r3, r2
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b2f      	cmp	r3, #47	; 0x2f
 800406e:	d0f6      	beq.n	800405e <create_name+0x4e>
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	4413      	add	r3, r2
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b5c      	cmp	r3, #92	; 0x5c
 800407a:	d0f0      	beq.n	800405e <create_name+0x4e>
			break;
 800407c:	e038      	b.n	80040f0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800407e:	7ffb      	ldrb	r3, [r7, #31]
 8004080:	2b2e      	cmp	r3, #46	; 0x2e
 8004082:	d003      	beq.n	800408c <create_name+0x7c>
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	429a      	cmp	r2, r3
 800408a:	d30c      	bcc.n	80040a6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2b0b      	cmp	r3, #11
 8004090:	d002      	beq.n	8004098 <create_name+0x88>
 8004092:	7ffb      	ldrb	r3, [r7, #31]
 8004094:	2b2e      	cmp	r3, #46	; 0x2e
 8004096:	d001      	beq.n	800409c <create_name+0x8c>
 8004098:	2306      	movs	r3, #6
 800409a:	e044      	b.n	8004126 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800409c:	2308      	movs	r3, #8
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	230b      	movs	r3, #11
 80040a2:	61bb      	str	r3, [r7, #24]
			continue;
 80040a4:	e022      	b.n	80040ec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80040a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	da04      	bge.n	80040b8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80040ae:	7ffb      	ldrb	r3, [r7, #31]
 80040b0:	3b80      	subs	r3, #128	; 0x80
 80040b2:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <create_name+0x120>)
 80040b4:	5cd3      	ldrb	r3, [r2, r3]
 80040b6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80040b8:	7ffb      	ldrb	r3, [r7, #31]
 80040ba:	4619      	mov	r1, r3
 80040bc:	481d      	ldr	r0, [pc, #116]	; (8004134 <create_name+0x124>)
 80040be:	f7fe ff95 	bl	8002fec <chk_chr>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <create_name+0xbc>
 80040c8:	2306      	movs	r3, #6
 80040ca:	e02c      	b.n	8004126 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80040cc:	7ffb      	ldrb	r3, [r7, #31]
 80040ce:	2b60      	cmp	r3, #96	; 0x60
 80040d0:	d905      	bls.n	80040de <create_name+0xce>
 80040d2:	7ffb      	ldrb	r3, [r7, #31]
 80040d4:	2b7a      	cmp	r3, #122	; 0x7a
 80040d6:	d802      	bhi.n	80040de <create_name+0xce>
 80040d8:	7ffb      	ldrb	r3, [r7, #31]
 80040da:	3b20      	subs	r3, #32
 80040dc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	613a      	str	r2, [r7, #16]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	4413      	add	r3, r2
 80040e8:	7ffa      	ldrb	r2, [r7, #31]
 80040ea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80040ec:	e7a6      	b.n	800403c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80040ee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	441a      	add	r2, r3
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <create_name+0xf4>
 8004100:	2306      	movs	r3, #6
 8004102:	e010      	b.n	8004126 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2be5      	cmp	r3, #229	; 0xe5
 800410a:	d102      	bne.n	8004112 <create_name+0x102>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2205      	movs	r2, #5
 8004110:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004112:	7ffb      	ldrb	r3, [r7, #31]
 8004114:	2b20      	cmp	r3, #32
 8004116:	d801      	bhi.n	800411c <create_name+0x10c>
 8004118:	2204      	movs	r2, #4
 800411a:	e000      	b.n	800411e <create_name+0x10e>
 800411c:	2200      	movs	r2, #0
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	330b      	adds	r3, #11
 8004122:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004124:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004126:	4618      	mov	r0, r3
 8004128:	3720      	adds	r7, #32
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	08005bb0 	.word	0x08005bb0
 8004134:	08005b1c 	.word	0x08005b1c

08004138 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800414c:	e002      	b.n	8004154 <follow_path+0x1c>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	3301      	adds	r3, #1
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b2f      	cmp	r3, #47	; 0x2f
 800415a:	d0f8      	beq.n	800414e <follow_path+0x16>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b5c      	cmp	r3, #92	; 0x5c
 8004162:	d0f4      	beq.n	800414e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2200      	movs	r2, #0
 8004168:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b1f      	cmp	r3, #31
 8004170:	d80a      	bhi.n	8004188 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2280      	movs	r2, #128	; 0x80
 8004176:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800417a:	2100      	movs	r1, #0
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff fcda 	bl	8003b36 <dir_sdi>
 8004182:	4603      	mov	r3, r0
 8004184:	75fb      	strb	r3, [r7, #23]
 8004186:	e048      	b.n	800421a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004188:	463b      	mov	r3, r7
 800418a:	4619      	mov	r1, r3
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ff3f 	bl	8004010 <create_name>
 8004192:	4603      	mov	r3, r0
 8004194:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004196:	7dfb      	ldrb	r3, [r7, #23]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d139      	bne.n	8004210 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff feaf 	bl	8003f00 <dir_find>
 80041a2:	4603      	mov	r3, r0
 80041a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80041ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d12c      	bne.n	8004214 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80041ba:	7afb      	ldrb	r3, [r7, #11]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d127      	bne.n	8004214 <follow_path+0xdc>
 80041c4:	2305      	movs	r3, #5
 80041c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80041c8:	e024      	b.n	8004214 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80041ca:	7afb      	ldrb	r3, [r7, #11]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d121      	bne.n	8004218 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	799b      	ldrb	r3, [r3, #6]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80041e0:	2305      	movs	r3, #5
 80041e2:	75fb      	strb	r3, [r7, #23]
 80041e4:	e019      	b.n	800421a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	8992      	ldrh	r2, [r2, #12]
 80041f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80041f8:	fb02 f200 	mul.w	r2, r2, r0
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	440b      	add	r3, r1
 8004200:	4619      	mov	r1, r3
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f7ff fe3d 	bl	8003e82 <ld_clust>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800420e:	e7bb      	b.n	8004188 <follow_path+0x50>
			if (res != FR_OK) break;
 8004210:	bf00      	nop
 8004212:	e002      	b.n	800421a <follow_path+0xe2>
				break;
 8004214:	bf00      	nop
 8004216:	e000      	b.n	800421a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004218:	bf00      	nop
			}
		}
	}

	return res;
 800421a:	7dfb      	ldrb	r3, [r7, #23]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800422c:	f04f 33ff 	mov.w	r3, #4294967295
 8004230:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d031      	beq.n	800429e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e002      	b.n	8004248 <get_ldnumber+0x24>
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	3301      	adds	r3, #1
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b20      	cmp	r3, #32
 800424e:	d903      	bls.n	8004258 <get_ldnumber+0x34>
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b3a      	cmp	r3, #58	; 0x3a
 8004256:	d1f4      	bne.n	8004242 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b3a      	cmp	r3, #58	; 0x3a
 800425e:	d11c      	bne.n	800429a <get_ldnumber+0x76>
			tp = *path;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	60fa      	str	r2, [r7, #12]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	3b30      	subs	r3, #48	; 0x30
 8004270:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b09      	cmp	r3, #9
 8004276:	d80e      	bhi.n	8004296 <get_ldnumber+0x72>
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	429a      	cmp	r2, r3
 800427e:	d10a      	bne.n	8004296 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d107      	bne.n	8004296 <get_ldnumber+0x72>
					vol = (int)i;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	3301      	adds	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	e002      	b.n	80042a0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800429a:	2300      	movs	r3, #0
 800429c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800429e:	693b      	ldr	r3, [r7, #16]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	70da      	strb	r2, [r3, #3]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f04f 32ff 	mov.w	r2, #4294967295
 80042c2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80042c4:	6839      	ldr	r1, [r7, #0]
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff f85c 	bl	8003384 <move_window>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <check_fs+0x2a>
 80042d2:	2304      	movs	r3, #4
 80042d4:	e038      	b.n	8004348 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3334      	adds	r3, #52	; 0x34
 80042da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe fda0 	bl	8002e24 <ld_word>
 80042e4:	4603      	mov	r3, r0
 80042e6:	461a      	mov	r2, r3
 80042e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d001      	beq.n	80042f4 <check_fs+0x48>
 80042f0:	2303      	movs	r3, #3
 80042f2:	e029      	b.n	8004348 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042fa:	2be9      	cmp	r3, #233	; 0xe9
 80042fc:	d009      	beq.n	8004312 <check_fs+0x66>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004304:	2beb      	cmp	r3, #235	; 0xeb
 8004306:	d11e      	bne.n	8004346 <check_fs+0x9a>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800430e:	2b90      	cmp	r3, #144	; 0x90
 8004310:	d119      	bne.n	8004346 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3334      	adds	r3, #52	; 0x34
 8004316:	3336      	adds	r3, #54	; 0x36
 8004318:	4618      	mov	r0, r3
 800431a:	f7fe fd9b 	bl	8002e54 <ld_dword>
 800431e:	4603      	mov	r3, r0
 8004320:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004324:	4a0a      	ldr	r2, [pc, #40]	; (8004350 <check_fs+0xa4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d101      	bne.n	800432e <check_fs+0x82>
 800432a:	2300      	movs	r3, #0
 800432c:	e00c      	b.n	8004348 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3334      	adds	r3, #52	; 0x34
 8004332:	3352      	adds	r3, #82	; 0x52
 8004334:	4618      	mov	r0, r3
 8004336:	f7fe fd8d 	bl	8002e54 <ld_dword>
 800433a:	4602      	mov	r2, r0
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <check_fs+0xa8>)
 800433e:	429a      	cmp	r2, r3
 8004340:	d101      	bne.n	8004346 <check_fs+0x9a>
 8004342:	2300      	movs	r3, #0
 8004344:	e000      	b.n	8004348 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004346:	2302      	movs	r3, #2
}
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	00544146 	.word	0x00544146
 8004354:	33544146 	.word	0x33544146

08004358 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b096      	sub	sp, #88	; 0x58
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	4613      	mov	r3, r2
 8004364:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f7ff ff59 	bl	8004224 <get_ldnumber>
 8004372:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004376:	2b00      	cmp	r3, #0
 8004378:	da01      	bge.n	800437e <find_volume+0x26>
 800437a:	230b      	movs	r3, #11
 800437c:	e265      	b.n	800484a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800437e:	4ab0      	ldr	r2, [pc, #704]	; (8004640 <find_volume+0x2e8>)
 8004380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004386:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <find_volume+0x3a>
 800438e:	230c      	movs	r3, #12
 8004390:	e25b      	b.n	800484a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004396:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	f023 0301 	bic.w	r3, r3, #1
 800439e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80043a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01a      	beq.n	80043de <find_volume+0x86>
		stat = disk_status(fs->drv);
 80043a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fe fc9b 	bl	8002ce8 <disk_status>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80043b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10c      	bne.n	80043de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <find_volume+0x82>
 80043ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80043d6:	230a      	movs	r3, #10
 80043d8:	e237      	b.n	800484a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80043da:	2300      	movs	r3, #0
 80043dc:	e235      	b.n	800484a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80043de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e0:	2200      	movs	r2, #0
 80043e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80043e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80043ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ee:	785b      	ldrb	r3, [r3, #1]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fe fc93 	bl	8002d1c <disk_initialize>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80043fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004408:	2303      	movs	r3, #3
 800440a:	e21e      	b.n	800484a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d007      	beq.n	8004422 <find_volume+0xca>
 8004412:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800441e:	230a      	movs	r3, #10
 8004420:	e213      	b.n	800484a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8004422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004424:	7858      	ldrb	r0, [r3, #1]
 8004426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004428:	330c      	adds	r3, #12
 800442a:	461a      	mov	r2, r3
 800442c:	2102      	movs	r1, #2
 800442e:	f7fe fcdb 	bl	8002de8 <disk_ioctl>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <find_volume+0xe4>
 8004438:	2301      	movs	r3, #1
 800443a:	e206      	b.n	800484a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800443c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443e:	899b      	ldrh	r3, [r3, #12]
 8004440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004444:	d80d      	bhi.n	8004462 <find_volume+0x10a>
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	899b      	ldrh	r3, [r3, #12]
 800444a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800444e:	d308      	bcc.n	8004462 <find_volume+0x10a>
 8004450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004452:	899b      	ldrh	r3, [r3, #12]
 8004454:	461a      	mov	r2, r3
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004458:	899b      	ldrh	r3, [r3, #12]
 800445a:	3b01      	subs	r3, #1
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <find_volume+0x10e>
 8004462:	2301      	movs	r3, #1
 8004464:	e1f1      	b.n	800484a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800446a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800446c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800446e:	f7ff ff1d 	bl	80042ac <check_fs>
 8004472:	4603      	mov	r3, r0
 8004474:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004478:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800447c:	2b02      	cmp	r3, #2
 800447e:	d14b      	bne.n	8004518 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004480:	2300      	movs	r3, #0
 8004482:	643b      	str	r3, [r7, #64]	; 0x40
 8004484:	e01f      	b.n	80044c6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004488:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800448c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004494:	4413      	add	r3, r2
 8004496:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449a:	3304      	adds	r3, #4
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d006      	beq.n	80044b0 <find_volume+0x158>
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	3308      	adds	r3, #8
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fe fcd4 	bl	8002e54 <ld_dword>
 80044ac:	4602      	mov	r2, r0
 80044ae:	e000      	b.n	80044b2 <find_volume+0x15a>
 80044b0:	2200      	movs	r2, #0
 80044b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80044ba:	440b      	add	r3, r1
 80044bc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80044c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c2:	3301      	adds	r3, #1
 80044c4:	643b      	str	r3, [r7, #64]	; 0x40
 80044c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d9dc      	bls.n	8004486 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80044cc:	2300      	movs	r3, #0
 80044ce:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80044d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <find_volume+0x184>
 80044d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d8:	3b01      	subs	r3, #1
 80044da:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80044dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80044e4:	4413      	add	r3, r2
 80044e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80044ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80044ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d005      	beq.n	80044fe <find_volume+0x1a6>
 80044f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80044f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80044f6:	f7ff fed9 	bl	80042ac <check_fs>
 80044fa:	4603      	mov	r3, r0
 80044fc:	e000      	b.n	8004500 <find_volume+0x1a8>
 80044fe:	2303      	movs	r3, #3
 8004500:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004504:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004508:	2b01      	cmp	r3, #1
 800450a:	d905      	bls.n	8004518 <find_volume+0x1c0>
 800450c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800450e:	3301      	adds	r3, #1
 8004510:	643b      	str	r3, [r7, #64]	; 0x40
 8004512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004514:	2b03      	cmp	r3, #3
 8004516:	d9e1      	bls.n	80044dc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800451c:	2b04      	cmp	r3, #4
 800451e:	d101      	bne.n	8004524 <find_volume+0x1cc>
 8004520:	2301      	movs	r3, #1
 8004522:	e192      	b.n	800484a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004524:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004528:	2b01      	cmp	r3, #1
 800452a:	d901      	bls.n	8004530 <find_volume+0x1d8>
 800452c:	230d      	movs	r3, #13
 800452e:	e18c      	b.n	800484a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004532:	3334      	adds	r3, #52	; 0x34
 8004534:	330b      	adds	r3, #11
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe fc74 	bl	8002e24 <ld_word>
 800453c:	4603      	mov	r3, r0
 800453e:	461a      	mov	r2, r3
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	899b      	ldrh	r3, [r3, #12]
 8004544:	429a      	cmp	r2, r3
 8004546:	d001      	beq.n	800454c <find_volume+0x1f4>
 8004548:	230d      	movs	r3, #13
 800454a:	e17e      	b.n	800484a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800454c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454e:	3334      	adds	r3, #52	; 0x34
 8004550:	3316      	adds	r3, #22
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fc66 	bl	8002e24 <ld_word>
 8004558:	4603      	mov	r3, r0
 800455a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800455c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <find_volume+0x218>
 8004562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004564:	3334      	adds	r3, #52	; 0x34
 8004566:	3324      	adds	r3, #36	; 0x24
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe fc73 	bl	8002e54 <ld_dword>
 800456e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004572:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004574:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004578:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800457c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004582:	789b      	ldrb	r3, [r3, #2]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d005      	beq.n	8004594 <find_volume+0x23c>
 8004588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458a:	789b      	ldrb	r3, [r3, #2]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d001      	beq.n	8004594 <find_volume+0x23c>
 8004590:	230d      	movs	r3, #13
 8004592:	e15a      	b.n	800484a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004596:	789b      	ldrb	r3, [r3, #2]
 8004598:	461a      	mov	r2, r3
 800459a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459c:	fb02 f303 	mul.w	r3, r2, r3
 80045a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80045a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80045ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b0:	895b      	ldrh	r3, [r3, #10]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <find_volume+0x270>
 80045b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b8:	895b      	ldrh	r3, [r3, #10]
 80045ba:	461a      	mov	r2, r3
 80045bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045be:	895b      	ldrh	r3, [r3, #10]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <find_volume+0x274>
 80045c8:	230d      	movs	r3, #13
 80045ca:	e13e      	b.n	800484a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80045cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ce:	3334      	adds	r3, #52	; 0x34
 80045d0:	3311      	adds	r3, #17
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fe fc26 	bl	8002e24 <ld_word>
 80045d8:	4603      	mov	r3, r0
 80045da:	461a      	mov	r2, r3
 80045dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80045e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e2:	891b      	ldrh	r3, [r3, #8]
 80045e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045e6:	8992      	ldrh	r2, [r2, #12]
 80045e8:	0952      	lsrs	r2, r2, #5
 80045ea:	b292      	uxth	r2, r2
 80045ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80045f0:	fb02 f201 	mul.w	r2, r2, r1
 80045f4:	1a9b      	subs	r3, r3, r2
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <find_volume+0x2a8>
 80045fc:	230d      	movs	r3, #13
 80045fe:	e124      	b.n	800484a <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004602:	3334      	adds	r3, #52	; 0x34
 8004604:	3313      	adds	r3, #19
 8004606:	4618      	mov	r0, r3
 8004608:	f7fe fc0c 	bl	8002e24 <ld_word>
 800460c:	4603      	mov	r3, r0
 800460e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <find_volume+0x2cc>
 8004616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004618:	3334      	adds	r3, #52	; 0x34
 800461a:	3320      	adds	r3, #32
 800461c:	4618      	mov	r0, r3
 800461e:	f7fe fc19 	bl	8002e54 <ld_dword>
 8004622:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004626:	3334      	adds	r3, #52	; 0x34
 8004628:	330e      	adds	r3, #14
 800462a:	4618      	mov	r0, r3
 800462c:	f7fe fbfa 	bl	8002e24 <ld_word>
 8004630:	4603      	mov	r3, r0
 8004632:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004634:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004636:	2b00      	cmp	r3, #0
 8004638:	d104      	bne.n	8004644 <find_volume+0x2ec>
 800463a:	230d      	movs	r3, #13
 800463c:	e105      	b.n	800484a <find_volume+0x4f2>
 800463e:	bf00      	nop
 8004640:	20000028 	.word	0x20000028

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004644:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004648:	4413      	add	r3, r2
 800464a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800464c:	8911      	ldrh	r1, [r2, #8]
 800464e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004650:	8992      	ldrh	r2, [r2, #12]
 8004652:	0952      	lsrs	r2, r2, #5
 8004654:	b292      	uxth	r2, r2
 8004656:	fbb1 f2f2 	udiv	r2, r1, r2
 800465a:	b292      	uxth	r2, r2
 800465c:	4413      	add	r3, r2
 800465e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	429a      	cmp	r2, r3
 8004666:	d201      	bcs.n	800466c <find_volume+0x314>
 8004668:	230d      	movs	r3, #13
 800466a:	e0ee      	b.n	800484a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800466c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800466e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004674:	8952      	ldrh	r2, [r2, #10]
 8004676:	fbb3 f3f2 	udiv	r3, r3, r2
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <find_volume+0x32e>
 8004682:	230d      	movs	r3, #13
 8004684:	e0e1      	b.n	800484a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8004686:	2303      	movs	r3, #3
 8004688:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004692:	4293      	cmp	r3, r2
 8004694:	d802      	bhi.n	800469c <find_volume+0x344>
 8004696:	2302      	movs	r3, #2
 8004698:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	f640 72f5 	movw	r2, #4085	; 0xff5
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d802      	bhi.n	80046ac <find_volume+0x354>
 80046a6:	2301      	movs	r3, #1
 80046a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	1c9a      	adds	r2, r3, #2
 80046b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80046b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046b8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80046ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80046bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046be:	441a      	add	r2, r3
 80046c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80046c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	441a      	add	r2, r3
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80046ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d11e      	bne.n	8004714 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80046d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d8:	3334      	adds	r3, #52	; 0x34
 80046da:	332a      	adds	r3, #42	; 0x2a
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fe fba1 	bl	8002e24 <ld_word>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <find_volume+0x394>
 80046e8:	230d      	movs	r3, #13
 80046ea:	e0ae      	b.n	800484a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80046ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ee:	891b      	ldrh	r3, [r3, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <find_volume+0x3a0>
 80046f4:	230d      	movs	r3, #13
 80046f6:	e0a8      	b.n	800484a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80046f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fa:	3334      	adds	r3, #52	; 0x34
 80046fc:	332c      	adds	r3, #44	; 0x2c
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fe fba8 	bl	8002e54 <ld_dword>
 8004704:	4602      	mov	r2, r0
 8004706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004708:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800470a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	647b      	str	r3, [r7, #68]	; 0x44
 8004712:	e01f      	b.n	8004754 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004716:	891b      	ldrh	r3, [r3, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <find_volume+0x3c8>
 800471c:	230d      	movs	r3, #13
 800471e:	e094      	b.n	800484a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004726:	441a      	add	r2, r3
 8004728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800472c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004730:	2b02      	cmp	r3, #2
 8004732:	d103      	bne.n	800473c <find_volume+0x3e4>
 8004734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	e00a      	b.n	8004752 <find_volume+0x3fa>
 800473c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473e:	699a      	ldr	r2, [r3, #24]
 8004740:	4613      	mov	r3, r2
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	4413      	add	r3, r2
 8004746:	085a      	lsrs	r2, r3, #1
 8004748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004752:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475a:	899b      	ldrh	r3, [r3, #12]
 800475c:	4619      	mov	r1, r3
 800475e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004760:	440b      	add	r3, r1
 8004762:	3b01      	subs	r3, #1
 8004764:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004766:	8989      	ldrh	r1, [r1, #12]
 8004768:	fbb3 f3f1 	udiv	r3, r3, r1
 800476c:	429a      	cmp	r2, r3
 800476e:	d201      	bcs.n	8004774 <find_volume+0x41c>
 8004770:	230d      	movs	r3, #13
 8004772:	e06a      	b.n	800484a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004776:	f04f 32ff 	mov.w	r2, #4294967295
 800477a:	615a      	str	r2, [r3, #20]
 800477c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477e:	695a      	ldr	r2, [r3, #20]
 8004780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004782:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8004784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004786:	2280      	movs	r2, #128	; 0x80
 8004788:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800478a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800478e:	2b03      	cmp	r3, #3
 8004790:	d149      	bne.n	8004826 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	3334      	adds	r3, #52	; 0x34
 8004796:	3330      	adds	r3, #48	; 0x30
 8004798:	4618      	mov	r0, r3
 800479a:	f7fe fb43 	bl	8002e24 <ld_word>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d140      	bne.n	8004826 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80047a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a6:	3301      	adds	r3, #1
 80047a8:	4619      	mov	r1, r3
 80047aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047ac:	f7fe fdea 	bl	8003384 <move_window>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d137      	bne.n	8004826 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80047b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b8:	2200      	movs	r2, #0
 80047ba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80047bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047be:	3334      	adds	r3, #52	; 0x34
 80047c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fe fb2d 	bl	8002e24 <ld_word>
 80047ca:	4603      	mov	r3, r0
 80047cc:	461a      	mov	r2, r3
 80047ce:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d127      	bne.n	8004826 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80047d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d8:	3334      	adds	r3, #52	; 0x34
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fe fb3a 	bl	8002e54 <ld_dword>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b1c      	ldr	r3, [pc, #112]	; (8004854 <find_volume+0x4fc>)
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d11e      	bne.n	8004826 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80047e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ea:	3334      	adds	r3, #52	; 0x34
 80047ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fe fb2f 	bl	8002e54 <ld_dword>
 80047f6:	4602      	mov	r2, r0
 80047f8:	4b17      	ldr	r3, [pc, #92]	; (8004858 <find_volume+0x500>)
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d113      	bne.n	8004826 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80047fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004800:	3334      	adds	r3, #52	; 0x34
 8004802:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fb24 	bl	8002e54 <ld_dword>
 800480c:	4602      	mov	r2, r0
 800480e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004810:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004814:	3334      	adds	r3, #52	; 0x34
 8004816:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe fb1a 	bl	8002e54 <ld_dword>
 8004820:	4602      	mov	r2, r0
 8004822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004824:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004828:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800482c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800482e:	4b0b      	ldr	r3, [pc, #44]	; (800485c <find_volume+0x504>)
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	3301      	adds	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	4b09      	ldr	r3, [pc, #36]	; (800485c <find_volume+0x504>)
 8004838:	801a      	strh	r2, [r3, #0]
 800483a:	4b08      	ldr	r3, [pc, #32]	; (800485c <find_volume+0x504>)
 800483c:	881a      	ldrh	r2, [r3, #0]
 800483e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004840:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004842:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004844:	f7fe fd36 	bl	80032b4 <clear_lock>
#endif
	return FR_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3758      	adds	r7, #88	; 0x58
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	41615252 	.word	0x41615252
 8004858:	61417272 	.word	0x61417272
 800485c:	2000002c 	.word	0x2000002c

08004860 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800486a:	2309      	movs	r3, #9
 800486c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01c      	beq.n	80048ae <validate+0x4e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d018      	beq.n	80048ae <validate+0x4e>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d013      	beq.n	80048ae <validate+0x4e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	889a      	ldrh	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	88db      	ldrh	r3, [r3, #6]
 8004890:	429a      	cmp	r2, r3
 8004892:	d10c      	bne.n	80048ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	785b      	ldrb	r3, [r3, #1]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fe fa24 	bl	8002ce8 <disk_status>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <validate+0x4e>
			res = FR_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d102      	bne.n	80048ba <validate+0x5a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	e000      	b.n	80048bc <validate+0x5c>
 80048ba:	2300      	movs	r3, #0
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	6013      	str	r3, [r2, #0]
	return res;
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b088      	sub	sp, #32
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	4613      	mov	r3, r2
 80048d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80048de:	f107 0310 	add.w	r3, r7, #16
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fc9e 	bl	8004224 <get_ldnumber>
 80048e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	da01      	bge.n	80048f4 <f_mount+0x28>
 80048f0:	230b      	movs	r3, #11
 80048f2:	e02b      	b.n	800494c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80048f4:	4a17      	ldr	r2, [pc, #92]	; (8004954 <f_mount+0x88>)
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004904:	69b8      	ldr	r0, [r7, #24]
 8004906:	f7fe fcd5 	bl	80032b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2200      	movs	r2, #0
 800490e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	490d      	ldr	r1, [pc, #52]	; (8004954 <f_mount+0x88>)
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <f_mount+0x66>
 800492c:	79fb      	ldrb	r3, [r7, #7]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d001      	beq.n	8004936 <f_mount+0x6a>
 8004932:	2300      	movs	r3, #0
 8004934:	e00a      	b.n	800494c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004936:	f107 010c 	add.w	r1, r7, #12
 800493a:	f107 0308 	add.w	r3, r7, #8
 800493e:	2200      	movs	r2, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fd09 	bl	8004358 <find_volume>
 8004946:	4603      	mov	r3, r0
 8004948:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800494a:	7dfb      	ldrb	r3, [r7, #23]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3720      	adds	r7, #32
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	20000028 	.word	0x20000028

08004958 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b098      	sub	sp, #96	; 0x60
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	4613      	mov	r3, r2
 8004964:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <f_open+0x18>
 800496c:	2309      	movs	r3, #9
 800496e:	e1bb      	b.n	8004ce8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004976:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004978:	79fa      	ldrb	r2, [r7, #7]
 800497a:	f107 0110 	add.w	r1, r7, #16
 800497e:	f107 0308 	add.w	r3, r7, #8
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff fce8 	bl	8004358 <find_volume>
 8004988:	4603      	mov	r3, r0
 800498a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800498e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004992:	2b00      	cmp	r3, #0
 8004994:	f040 819f 	bne.w	8004cd6 <f_open+0x37e>
		dj.obj.fs = fs;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	f107 0314 	add.w	r3, r7, #20
 80049a2:	4611      	mov	r1, r2
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fbc7 	bl	8004138 <follow_path>
 80049aa:	4603      	mov	r3, r0
 80049ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80049b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d11a      	bne.n	80049ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80049b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80049bc:	b25b      	sxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	da03      	bge.n	80049ca <f_open+0x72>
				res = FR_INVALID_NAME;
 80049c2:	2306      	movs	r3, #6
 80049c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80049c8:	e011      	b.n	80049ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	bf14      	ite	ne
 80049d4:	2301      	movne	r3, #1
 80049d6:	2300      	moveq	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	f107 0314 	add.w	r3, r7, #20
 80049e0:	4611      	mov	r1, r2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe fb1e 	bl	8003024 <chk_lock>
 80049e8:	4603      	mov	r3, r0
 80049ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	f003 031c 	and.w	r3, r3, #28
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d07f      	beq.n	8004af8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80049f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d017      	beq.n	8004a30 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004a00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d10e      	bne.n	8004a26 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004a08:	f7fe fb68 	bl	80030dc <enq_lock>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d006      	beq.n	8004a20 <f_open+0xc8>
 8004a12:	f107 0314 	add.w	r3, r7, #20
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7ff fac7 	bl	8003faa <dir_register>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	e000      	b.n	8004a22 <f_open+0xca>
 8004a20:	2312      	movs	r3, #18
 8004a22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	f043 0308 	orr.w	r3, r3, #8
 8004a2c:	71fb      	strb	r3, [r7, #7]
 8004a2e:	e010      	b.n	8004a52 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004a30:	7ebb      	ldrb	r3, [r7, #26]
 8004a32:	f003 0311 	and.w	r3, r3, #17
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <f_open+0xea>
					res = FR_DENIED;
 8004a3a:	2307      	movs	r3, #7
 8004a3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004a40:	e007      	b.n	8004a52 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <f_open+0xfa>
 8004a4c:	2308      	movs	r3, #8
 8004a4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004a52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d168      	bne.n	8004b2c <f_open+0x1d4>
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d063      	beq.n	8004b2c <f_open+0x1d4>
				dw = GET_FATTIME();
 8004a64:	f000 fc72 	bl	800534c <get_fattime>
 8004a68:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6c:	330e      	adds	r3, #14
 8004a6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fe fa2d 	bl	8002ed0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a78:	3316      	adds	r3, #22
 8004a7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fe fa27 	bl	8002ed0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a84:	330b      	adds	r3, #11
 8004a86:	2220      	movs	r2, #32
 8004a88:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a8e:	4611      	mov	r1, r2
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff f9f6 	bl	8003e82 <ld_clust>
 8004a96:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff fa0e 	bl	8003ec0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa6:	331c      	adds	r3, #28
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fe fa10 	bl	8002ed0 <st_dword>
					fs->wflag = 1;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d037      	beq.n	8004b2c <f_open+0x1d4>
						dw = fs->winsect;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8004ac2:	f107 0314 	add.w	r3, r7, #20
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe fefe 	bl	80038cc <remove_chain>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8004ad6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d126      	bne.n	8004b2c <f_open+0x1d4>
							res = move_window(fs, dw);
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fe fc4e 	bl	8003384 <move_window>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004af2:	3a01      	subs	r2, #1
 8004af4:	611a      	str	r2, [r3, #16]
 8004af6:	e019      	b.n	8004b2c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004af8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d115      	bne.n	8004b2c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004b00:	7ebb      	ldrb	r3, [r7, #26]
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <f_open+0x1ba>
					res = FR_NO_FILE;
 8004b0a:	2304      	movs	r3, #4
 8004b0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004b10:	e00c      	b.n	8004b2c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d007      	beq.n	8004b2c <f_open+0x1d4>
 8004b1c:	7ebb      	ldrb	r3, [r7, #26]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <f_open+0x1d4>
						res = FR_DENIED;
 8004b26:	2307      	movs	r3, #7
 8004b28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8004b2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d128      	bne.n	8004b86 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b44:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8004b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	f023 0301 	bic.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	bf14      	ite	ne
 8004b5e:	2301      	movne	r3, #1
 8004b60:	2300      	moveq	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	f107 0314 	add.w	r3, r7, #20
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fe fad7 	bl	8003120 <inc_lock>
 8004b72:	4602      	mov	r2, r0
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d102      	bne.n	8004b86 <f_open+0x22e>
 8004b80:	2302      	movs	r3, #2
 8004b82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004b86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f040 80a3 	bne.w	8004cd6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b94:	4611      	mov	r1, r2
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff f973 	bl	8003e82 <ld_clust>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba4:	331c      	adds	r3, #28
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fe f954 	bl	8002e54 <ld_dword>
 8004bac:	4602      	mov	r2, r0
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	88da      	ldrh	r2, [r3, #6]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	79fa      	ldrb	r2, [r7, #7]
 8004bca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3330      	adds	r3, #48	; 0x30
 8004be2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004be6:	2100      	movs	r1, #0
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fe f9be 	bl	8002f6a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004bee:	79fb      	ldrb	r3, [r7, #7]
 8004bf0:	f003 0320 	and.w	r3, r3, #32
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d06e      	beq.n	8004cd6 <f_open+0x37e>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d06a      	beq.n	8004cd6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	895b      	ldrh	r3, [r3, #10]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	899b      	ldrh	r3, [r3, #12]
 8004c12:	fb03 f302 	mul.w	r3, r3, r2
 8004c16:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	657b      	str	r3, [r7, #84]	; 0x54
 8004c24:	e016      	b.n	8004c54 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fe fc67 	bl	80034fe <get_fat>
 8004c30:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8004c32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d802      	bhi.n	8004c3e <f_open+0x2e6>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d102      	bne.n	8004c4c <f_open+0x2f4>
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004c4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	657b      	str	r3, [r7, #84]	; 0x54
 8004c54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d103      	bne.n	8004c64 <f_open+0x30c>
 8004c5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d8e0      	bhi.n	8004c26 <f_open+0x2ce>
				}
				fp->clust = clst;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c68:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004c6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d131      	bne.n	8004cd6 <f_open+0x37e>
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	899b      	ldrh	r3, [r3, #12]
 8004c76:	461a      	mov	r2, r3
 8004c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c7e:	fb02 f201 	mul.w	r2, r2, r1
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d026      	beq.n	8004cd6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fe fc17 	bl	80034c0 <clust2sect>
 8004c92:	6478      	str	r0, [r7, #68]	; 0x44
 8004c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <f_open+0x34a>
						res = FR_INT_ERR;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004ca0:	e019      	b.n	8004cd6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	899b      	ldrh	r3, [r3, #12]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004caa:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cb0:	441a      	add	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	7858      	ldrb	r0, [r3, #1]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a1a      	ldr	r2, [r3, #32]
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	f7fe f84f 	bl	8002d68 <disk_read>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <f_open+0x37e>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004cd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <f_open+0x38c>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004ce4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3760      	adds	r7, #96	; 0x60
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08c      	sub	sp, #48	; 0x30
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f107 0210 	add.w	r2, r7, #16
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff fda5 	bl	8004860 <validate>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004d1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d107      	bne.n	8004d34 <f_write+0x44>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	7d5b      	ldrb	r3, [r3, #21]
 8004d28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004d2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <f_write+0x4a>
 8004d34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004d38:	e16a      	b.n	8005010 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	7d1b      	ldrb	r3, [r3, #20]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <f_write+0x5a>
 8004d46:	2307      	movs	r3, #7
 8004d48:	e162      	b.n	8005010 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	441a      	add	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	f080 814c 	bcs.w	8004ff4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8004d64:	e146      	b.n	8004ff4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	8992      	ldrh	r2, [r2, #12]
 8004d6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d72:	fb02 f201 	mul.w	r2, r2, r1
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f040 80f1 	bne.w	8004f60 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	8992      	ldrh	r2, [r2, #12]
 8004d86:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	8952      	ldrh	r2, [r2, #10]
 8004d8e:	3a01      	subs	r2, #1
 8004d90:	4013      	ands	r3, r2
 8004d92:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d143      	bne.n	8004e22 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10c      	bne.n	8004dbc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8004da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d11a      	bne.n	8004de4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2100      	movs	r1, #0
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe fdef 	bl	8003996 <create_chain>
 8004db8:	62b8      	str	r0, [r7, #40]	; 0x28
 8004dba:	e013      	b.n	8004de4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d007      	beq.n	8004dd4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	4619      	mov	r1, r3
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7fe fe7b 	bl	8003ac6 <clmt_clust>
 8004dd0:	62b8      	str	r0, [r7, #40]	; 0x28
 8004dd2:	e007      	b.n	8004de4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4610      	mov	r0, r2
 8004dde:	f7fe fdda 	bl	8003996 <create_chain>
 8004de2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 8109 	beq.w	8004ffe <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d104      	bne.n	8004dfc <f_write+0x10c>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2202      	movs	r2, #2
 8004df6:	755a      	strb	r2, [r3, #21]
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e109      	b.n	8005010 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e02:	d104      	bne.n	8004e0e <f_write+0x11e>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2201      	movs	r2, #1
 8004e08:	755a      	strb	r2, [r3, #21]
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e100      	b.n	8005010 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e12:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d102      	bne.n	8004e22 <f_write+0x132>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e20:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	7d1b      	ldrb	r3, [r3, #20]
 8004e26:	b25b      	sxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	da18      	bge.n	8004e5e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	7858      	ldrb	r0, [r3, #1]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a1a      	ldr	r2, [r3, #32]
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	f7fd ffb4 	bl	8002da8 <disk_write>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d004      	beq.n	8004e50 <f_write+0x160>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	755a      	strb	r2, [r3, #21]
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e0df      	b.n	8005010 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	7d1b      	ldrb	r3, [r3, #20]
 8004e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	4619      	mov	r1, r3
 8004e66:	4610      	mov	r0, r2
 8004e68:	f7fe fb2a 	bl	80034c0 <clust2sect>
 8004e6c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d104      	bne.n	8004e7e <f_write+0x18e>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2202      	movs	r2, #2
 8004e78:	755a      	strb	r2, [r3, #21]
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e0c8      	b.n	8005010 <f_write+0x320>
			sect += csect;
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	4413      	add	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	899b      	ldrh	r3, [r3, #12]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e92:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d043      	beq.n	8004f22 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	8952      	ldrh	r2, [r2, #10]
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d905      	bls.n	8004eb4 <f_write+0x1c4>
					cc = fs->csize - csect;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	895b      	ldrh	r3, [r3, #10]
 8004eac:	461a      	mov	r2, r3
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	7858      	ldrb	r0, [r3, #1]
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	69f9      	ldr	r1, [r7, #28]
 8004ebe:	f7fd ff73 	bl	8002da8 <disk_write>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d004      	beq.n	8004ed2 <f_write+0x1e2>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	755a      	strb	r2, [r3, #21]
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e09e      	b.n	8005010 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6a1a      	ldr	r2, [r3, #32]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	6a3a      	ldr	r2, [r7, #32]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d918      	bls.n	8004f12 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a1a      	ldr	r2, [r3, #32]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	8992      	ldrh	r2, [r2, #12]
 8004ef2:	fb02 f303 	mul.w	r3, r2, r3
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	18d1      	adds	r1, r2, r3
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	899b      	ldrh	r3, [r3, #12]
 8004efe:	461a      	mov	r2, r3
 8004f00:	f7fe f812 	bl	8002f28 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	7d1b      	ldrb	r3, [r3, #20]
 8004f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	899b      	ldrh	r3, [r3, #12]
 8004f16:	461a      	mov	r2, r3
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	fb02 f303 	mul.w	r3, r2, r3
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8004f20:	e04b      	b.n	8004fba <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d016      	beq.n	8004f5a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	699a      	ldr	r2, [r3, #24]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d210      	bcs.n	8004f5a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	7858      	ldrb	r0, [r3, #1]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004f42:	2301      	movs	r3, #1
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	f7fd ff0f 	bl	8002d68 <disk_read>
 8004f4a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d004      	beq.n	8004f5a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2201      	movs	r2, #1
 8004f54:	755a      	strb	r2, [r3, #21]
 8004f56:	2301      	movs	r3, #1
 8004f58:	e05a      	b.n	8005010 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	899b      	ldrh	r3, [r3, #12]
 8004f64:	4618      	mov	r0, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	8992      	ldrh	r2, [r2, #12]
 8004f6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f72:	fb02 f201 	mul.w	r2, r2, r1
 8004f76:	1a9b      	subs	r3, r3, r2
 8004f78:	1ac3      	subs	r3, r0, r3
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8004f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d901      	bls.n	8004f88 <f_write+0x298>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	8992      	ldrh	r2, [r2, #12]
 8004f96:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f9a:	fb02 f200 	mul.w	r2, r2, r0
 8004f9e:	1a9b      	subs	r3, r3, r2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa4:	69f9      	ldr	r1, [r7, #28]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fd ffbe 	bl	8002f28 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	7d1b      	ldrb	r3, [r3, #20]
 8004fb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	4413      	add	r3, r2
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	441a      	add	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	619a      	str	r2, [r3, #24]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	bf38      	it	cc
 8004fda:	461a      	movcc	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	60da      	str	r2, [r3, #12]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	441a      	add	r2, r3
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f47f aeb5 	bne.w	8004d66 <f_write+0x76>
 8004ffc:	e000      	b.n	8005000 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004ffe:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	7d1b      	ldrb	r3, [r3, #20]
 8005004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005008:	b2da      	uxtb	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3730      	adds	r7, #48	; 0x30
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f107 0208 	add.w	r2, r7, #8
 8005026:	4611      	mov	r1, r2
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fc19 	bl	8004860 <validate>
 800502e:	4603      	mov	r3, r0
 8005030:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005032:	7dfb      	ldrb	r3, [r7, #23]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d168      	bne.n	800510a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	7d1b      	ldrb	r3, [r3, #20]
 800503c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005040:	2b00      	cmp	r3, #0
 8005042:	d062      	beq.n	800510a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	7d1b      	ldrb	r3, [r3, #20]
 8005048:	b25b      	sxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	da15      	bge.n	800507a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	7858      	ldrb	r0, [r3, #1]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1a      	ldr	r2, [r3, #32]
 800505c:	2301      	movs	r3, #1
 800505e:	f7fd fea3 	bl	8002da8 <disk_write>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <f_sync+0x54>
 8005068:	2301      	movs	r3, #1
 800506a:	e04f      	b.n	800510c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	7d1b      	ldrb	r3, [r3, #20]
 8005070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005074:	b2da      	uxtb	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800507a:	f000 f967 	bl	800534c <get_fattime>
 800507e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	4619      	mov	r1, r3
 8005088:	4610      	mov	r0, r2
 800508a:	f7fe f97b 	bl	8003384 <move_window>
 800508e:	4603      	mov	r3, r0
 8005090:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005092:	7dfb      	ldrb	r3, [r7, #23]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d138      	bne.n	800510a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	330b      	adds	r3, #11
 80050a2:	781a      	ldrb	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	330b      	adds	r3, #11
 80050a8:	f042 0220 	orr.w	r2, r2, #32
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	461a      	mov	r2, r3
 80050ba:	68f9      	ldr	r1, [r7, #12]
 80050bc:	f7fe ff00 	bl	8003ec0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f103 021c 	add.w	r2, r3, #28
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f7fd feff 	bl	8002ed0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3316      	adds	r3, #22
 80050d6:	6939      	ldr	r1, [r7, #16]
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fd fef9 	bl	8002ed0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	3312      	adds	r3, #18
 80050e2:	2100      	movs	r1, #0
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fd fed8 	bl	8002e9a <st_word>
					fs->wflag = 1;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2201      	movs	r2, #1
 80050ee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fe f974 	bl	80033e0 <sync_fs>
 80050f8:	4603      	mov	r3, r0
 80050fa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	7d1b      	ldrb	r3, [r3, #20]
 8005100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005104:	b2da      	uxtb	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800510a:	7dfb      	ldrb	r3, [r7, #23]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff ff7b 	bl	8005018 <f_sync>
 8005122:	4603      	mov	r3, r0
 8005124:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d118      	bne.n	800515e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f107 0208 	add.w	r2, r7, #8
 8005132:	4611      	mov	r1, r2
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff fb93 	bl	8004860 <validate>
 800513a:	4603      	mov	r3, r0
 800513c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10c      	bne.n	800515e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	4618      	mov	r0, r3
 800514a:	f7fe f877 	bl	800323c <dec_lock>
 800514e:	4603      	mov	r3, r0
 8005150:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d102      	bne.n	800515e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800515e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	4613      	mov	r3, r2
 8005174:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005176:	2301      	movs	r3, #1
 8005178:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800517e:	4b1f      	ldr	r3, [pc, #124]	; (80051fc <FATFS_LinkDriverEx+0x94>)
 8005180:	7a5b      	ldrb	r3, [r3, #9]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d131      	bne.n	80051ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005188:	4b1c      	ldr	r3, [pc, #112]	; (80051fc <FATFS_LinkDriverEx+0x94>)
 800518a:	7a5b      	ldrb	r3, [r3, #9]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	461a      	mov	r2, r3
 8005190:	4b1a      	ldr	r3, [pc, #104]	; (80051fc <FATFS_LinkDriverEx+0x94>)
 8005192:	2100      	movs	r1, #0
 8005194:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005196:	4b19      	ldr	r3, [pc, #100]	; (80051fc <FATFS_LinkDriverEx+0x94>)
 8005198:	7a5b      	ldrb	r3, [r3, #9]
 800519a:	b2db      	uxtb	r3, r3
 800519c:	4a17      	ldr	r2, [pc, #92]	; (80051fc <FATFS_LinkDriverEx+0x94>)
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80051a6:	4b15      	ldr	r3, [pc, #84]	; (80051fc <FATFS_LinkDriverEx+0x94>)
 80051a8:	7a5b      	ldrb	r3, [r3, #9]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	4b13      	ldr	r3, [pc, #76]	; (80051fc <FATFS_LinkDriverEx+0x94>)
 80051b0:	4413      	add	r3, r2
 80051b2:	79fa      	ldrb	r2, [r7, #7]
 80051b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80051b6:	4b11      	ldr	r3, [pc, #68]	; (80051fc <FATFS_LinkDriverEx+0x94>)
 80051b8:	7a5b      	ldrb	r3, [r3, #9]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	b2d1      	uxtb	r1, r2
 80051c0:	4a0e      	ldr	r2, [pc, #56]	; (80051fc <FATFS_LinkDriverEx+0x94>)
 80051c2:	7251      	strb	r1, [r2, #9]
 80051c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80051c6:	7dbb      	ldrb	r3, [r7, #22]
 80051c8:	3330      	adds	r3, #48	; 0x30
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	3301      	adds	r3, #1
 80051d4:	223a      	movs	r2, #58	; 0x3a
 80051d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	3302      	adds	r3, #2
 80051dc:	222f      	movs	r2, #47	; 0x2f
 80051de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	3303      	adds	r3, #3
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80051ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000050 	.word	0x20000050

08005200 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800520a:	2200      	movs	r2, #0
 800520c:	6839      	ldr	r1, [r7, #0]
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff ffaa 	bl	8005168 <FATFS_LinkDriverEx>
 8005214:	4603      	mov	r3, r0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800522a:	f000 f86b 	bl	8005304 <BSP_SD_IsDetected>
 800522e:	4603      	mov	r3, r0
 8005230:	2b01      	cmp	r3, #1
 8005232:	d001      	beq.n	8005238 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e005      	b.n	8005244 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005238:	4804      	ldr	r0, [pc, #16]	; (800524c <BSP_SD_Init+0x2c>)
 800523a:	f7fc f893 	bl	8001364 <HAL_SD_Init>
 800523e:	4603      	mov	r3, r0
 8005240:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005242:	79fb      	ldrb	r3, [r7, #7]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20004134 	.word	0x20004134

08005250 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af02      	add	r7, sp, #8
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	68f9      	ldr	r1, [r7, #12]
 800526c:	4806      	ldr	r0, [pc, #24]	; (8005288 <BSP_SD_ReadBlocks+0x38>)
 800526e:	f7fc f909 	bl	8001484 <HAL_SD_ReadBlocks>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800527c:	7dfb      	ldrb	r3, [r7, #23]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20004134 	.word	0x20004134

0800528c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af02      	add	r7, sp, #8
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	68f9      	ldr	r1, [r7, #12]
 80052a8:	4806      	ldr	r0, [pc, #24]	; (80052c4 <BSP_SD_WriteBlocks+0x38>)
 80052aa:	f7fc fae5 	bl	8001878 <HAL_SD_WriteBlocks>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20004134 	.word	0x20004134

080052c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80052cc:	4805      	ldr	r0, [pc, #20]	; (80052e4 <BSP_SD_GetCardState+0x1c>)
 80052ce:	f7fc fe45 	bl	8001f5c <HAL_SD_GetCardState>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	bf14      	ite	ne
 80052d8:	2301      	movne	r3, #1
 80052da:	2300      	moveq	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
}
 80052de:	4618      	mov	r0, r3
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	20004134 	.word	0x20004134

080052e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	4803      	ldr	r0, [pc, #12]	; (8005300 <BSP_SD_GetCardInfo+0x18>)
 80052f4:	f7fc fe06 	bl	8001f04 <HAL_SD_GetCardInfo>
}
 80052f8:	bf00      	nop
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	20004134 	.word	0x20004134

08005304 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800530a:	2301      	movs	r3, #1
 800530c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800530e:	f000 f825 	bl	800535c <BSP_PlatformIsDetected>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005318:	2300      	movs	r3, #0
 800531a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800531c:	79fb      	ldrb	r3, [r7, #7]
 800531e:	b2db      	uxtb	r3, r3
}
 8005320:	4618      	mov	r0, r3
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800532c:	4904      	ldr	r1, [pc, #16]	; (8005340 <MX_FATFS_Init+0x18>)
 800532e:	4805      	ldr	r0, [pc, #20]	; (8005344 <MX_FATFS_Init+0x1c>)
 8005330:	f7ff ff66 	bl	8005200 <FATFS_LinkDriver>
 8005334:	4603      	mov	r3, r0
 8005336:	461a      	mov	r2, r3
 8005338:	4b03      	ldr	r3, [pc, #12]	; (8005348 <MX_FATFS_Init+0x20>)
 800533a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800533c:	bf00      	nop
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20000064 	.word	0x20000064
 8005344:	08005c30 	.word	0x08005c30
 8005348:	20000060 	.word	0x20000060

0800534c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005350:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8005352:	4618      	mov	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005362:	2301      	movs	r3, #1
 8005364:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005366:	2140      	movs	r1, #64	; 0x40
 8005368:	4806      	ldr	r0, [pc, #24]	; (8005384 <BSP_PlatformIsDetected+0x28>)
 800536a:	f7fb fbc1 	bl	8000af0 <HAL_GPIO_ReadPin>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8005374:	2300      	movs	r3, #0
 8005376:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8005378:	79fb      	ldrb	r3, [r7, #7]
}  
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40020800 	.word	0x40020800

08005388 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08a      	sub	sp, #40	; 0x28
 800538c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800538e:	f107 0314 	add.w	r3, r7, #20
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	605a      	str	r2, [r3, #4]
 8005398:	609a      	str	r2, [r3, #8]
 800539a:	60da      	str	r2, [r3, #12]
 800539c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800539e:	2300      	movs	r3, #0
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	4b44      	ldr	r3, [pc, #272]	; (80054b4 <MX_GPIO_Init+0x12c>)
 80053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a6:	4a43      	ldr	r2, [pc, #268]	; (80054b4 <MX_GPIO_Init+0x12c>)
 80053a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ac:	6313      	str	r3, [r2, #48]	; 0x30
 80053ae:	4b41      	ldr	r3, [pc, #260]	; (80054b4 <MX_GPIO_Init+0x12c>)
 80053b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	4b3d      	ldr	r3, [pc, #244]	; (80054b4 <MX_GPIO_Init+0x12c>)
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	4a3c      	ldr	r2, [pc, #240]	; (80054b4 <MX_GPIO_Init+0x12c>)
 80053c4:	f043 0304 	orr.w	r3, r3, #4
 80053c8:	6313      	str	r3, [r2, #48]	; 0x30
 80053ca:	4b3a      	ldr	r3, [pc, #232]	; (80054b4 <MX_GPIO_Init+0x12c>)
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	f003 0304 	and.w	r3, r3, #4
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053d6:	2300      	movs	r3, #0
 80053d8:	60bb      	str	r3, [r7, #8]
 80053da:	4b36      	ldr	r3, [pc, #216]	; (80054b4 <MX_GPIO_Init+0x12c>)
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	4a35      	ldr	r2, [pc, #212]	; (80054b4 <MX_GPIO_Init+0x12c>)
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	6313      	str	r3, [r2, #48]	; 0x30
 80053e6:	4b33      	ldr	r3, [pc, #204]	; (80054b4 <MX_GPIO_Init+0x12c>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	60bb      	str	r3, [r7, #8]
 80053f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80053f2:	2300      	movs	r3, #0
 80053f4:	607b      	str	r3, [r7, #4]
 80053f6:	4b2f      	ldr	r3, [pc, #188]	; (80054b4 <MX_GPIO_Init+0x12c>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	4a2e      	ldr	r2, [pc, #184]	; (80054b4 <MX_GPIO_Init+0x12c>)
 80053fc:	f043 0308 	orr.w	r3, r3, #8
 8005400:	6313      	str	r3, [r2, #48]	; 0x30
 8005402:	4b2c      	ldr	r3, [pc, #176]	; (80054b4 <MX_GPIO_Init+0x12c>)
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	607b      	str	r3, [r7, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800540e:	2300      	movs	r3, #0
 8005410:	603b      	str	r3, [r7, #0]
 8005412:	4b28      	ldr	r3, [pc, #160]	; (80054b4 <MX_GPIO_Init+0x12c>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	4a27      	ldr	r2, [pc, #156]	; (80054b4 <MX_GPIO_Init+0x12c>)
 8005418:	f043 0302 	orr.w	r3, r3, #2
 800541c:	6313      	str	r3, [r2, #48]	; 0x30
 800541e:	4b25      	ldr	r3, [pc, #148]	; (80054b4 <MX_GPIO_Init+0x12c>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	603b      	str	r3, [r7, #0]
 8005428:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800542a:	2200      	movs	r2, #0
 800542c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005430:	4821      	ldr	r0, [pc, #132]	; (80054b8 <MX_GPIO_Init+0x130>)
 8005432:	f7fb fb75 	bl	8000b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8005436:	2200      	movs	r2, #0
 8005438:	2110      	movs	r1, #16
 800543a:	4820      	ldr	r0, [pc, #128]	; (80054bc <MX_GPIO_Init+0x134>)
 800543c:	f7fb fb70 	bl	8000b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin;
 8005440:	2340      	movs	r3, #64	; 0x40
 8005442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005444:	2300      	movs	r3, #0
 8005446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_SW_GPIO_Port, &GPIO_InitStruct);
 800544c:	f107 0314 	add.w	r3, r7, #20
 8005450:	4619      	mov	r1, r3
 8005452:	481b      	ldr	r0, [pc, #108]	; (80054c0 <MX_GPIO_Init+0x138>)
 8005454:	f7fb f9b2 	bl	80007bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8005458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800545c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800545e:	2301      	movs	r3, #1
 8005460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005462:	2300      	movs	r3, #0
 8005464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005466:	2300      	movs	r3, #0
 8005468:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800546a:	f107 0314 	add.w	r3, r7, #20
 800546e:	4619      	mov	r1, r3
 8005470:	4811      	ldr	r0, [pc, #68]	; (80054b8 <MX_GPIO_Init+0x130>)
 8005472:	f7fb f9a3 	bl	80007bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8005476:	2310      	movs	r3, #16
 8005478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800547a:	2301      	movs	r3, #1
 800547c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547e:	2300      	movs	r3, #0
 8005480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005482:	2300      	movs	r3, #0
 8005484:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8005486:	f107 0314 	add.w	r3, r7, #20
 800548a:	4619      	mov	r1, r3
 800548c:	480b      	ldr	r0, [pc, #44]	; (80054bc <MX_GPIO_Init+0x134>)
 800548e:	f7fb f995 	bl	80007bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005492:	2320      	movs	r3, #32
 8005494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005496:	2300      	movs	r3, #0
 8005498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549a:	2300      	movs	r3, #0
 800549c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800549e:	f107 0314 	add.w	r3, r7, #20
 80054a2:	4619      	mov	r1, r3
 80054a4:	4805      	ldr	r0, [pc, #20]	; (80054bc <MX_GPIO_Init+0x134>)
 80054a6:	f7fb f989 	bl	80007bc <HAL_GPIO_Init>

}
 80054aa:	bf00      	nop
 80054ac:	3728      	adds	r7, #40	; 0x28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40023800 	.word	0x40023800
 80054b8:	40020000 	.word	0x40020000
 80054bc:	40020400 	.word	0x40020400
 80054c0:	40020800 	.word	0x40020800

080054c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b096      	sub	sp, #88	; 0x58
 80054c8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80054ca:	f7fa fffd 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80054ce:	f000 f86f 	bl	80055b0 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80054d2:	f7ff ff59 	bl	8005388 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80054d6:	f000 f9bf 	bl	8005858 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80054da:	f7ff ff25 	bl	8005328 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


  uint8_t sw = HAL_GPIO_ReadPin(SDIO_SW_GPIO_Port, SDIO_SW_Pin);
 80054de:	2140      	movs	r1, #64	; 0x40
 80054e0:	482b      	ldr	r0, [pc, #172]	; (8005590 <main+0xcc>)
 80054e2:	f7fb fb05 	bl	8000af0 <HAL_GPIO_ReadPin>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80054ec:	2200      	movs	r2, #0
 80054ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054f2:	4828      	ldr	r0, [pc, #160]	; (8005594 <main+0xd0>)
 80054f4:	f7fb fb14 	bl	8000b20 <HAL_GPIO_WritePin>
  FRESULT  tmp = f_mount(&myFatFS, SDPath, 1); //treti parameter urcuje ci chcem mount or unmount
 80054f8:	2201      	movs	r2, #1
 80054fa:	4927      	ldr	r1, [pc, #156]	; (8005598 <main+0xd4>)
 80054fc:	4827      	ldr	r0, [pc, #156]	; (800559c <main+0xd8>)
 80054fe:	f7ff f9e5 	bl	80048cc <f_mount>
 8005502:	4603      	mov	r3, r0
 8005504:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

  if(tmp == FR_OK){
 8005508:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800550c:	2b00      	cmp	r3, #0
 800550e:	d12c      	bne.n	800556a <main+0xa6>
	  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 8005510:	2201      	movs	r2, #1
 8005512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005516:	481f      	ldr	r0, [pc, #124]	; (8005594 <main+0xd0>)
 8005518:	f7fb fb02 	bl	8000b20 <HAL_GPIO_WritePin>


	  char myFileName[] = "TEST2.txt\0";
 800551c:	4a20      	ldr	r2, [pc, #128]	; (80055a0 <main+0xdc>)
 800551e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005522:	ca07      	ldmia	r2, {r0, r1, r2}
 8005524:	c303      	stmia	r3!, {r0, r1}
 8005526:	801a      	strh	r2, [r3, #0]
 8005528:	3302      	adds	r3, #2
 800552a:	0c12      	lsrs	r2, r2, #16
 800552c:	701a      	strb	r2, [r3, #0]
	  tmp = f_open(&myFile, myFileName, FA_WRITE | FA_CREATE_ALWAYS );
 800552e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005532:	220a      	movs	r2, #10
 8005534:	4619      	mov	r1, r3
 8005536:	481b      	ldr	r0, [pc, #108]	; (80055a4 <main+0xe0>)
 8005538:	f7ff fa0e 	bl	8004958 <f_open>
 800553c:	4603      	mov	r3, r0
 800553e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	  if( tmp == FR_OK){
 8005542:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10f      	bne.n	800556a <main+0xa6>

		  char myData[] = "SDIO 4 bit mode funguje; co dodat\nJedine ano a druhy krat znova ide";
 800554a:	4a17      	ldr	r2, [pc, #92]	; (80055a8 <main+0xe4>)
 800554c:	1d3b      	adds	r3, r7, #4
 800554e:	4611      	mov	r1, r2
 8005550:	2244      	movs	r2, #68	; 0x44
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fac2 	bl	8005adc <memcpy>

		  if( f_write(&myFile, myData, sizeof(myData), &myBytes) == FR_OK){
 8005558:	1d39      	adds	r1, r7, #4
 800555a:	4b14      	ldr	r3, [pc, #80]	; (80055ac <main+0xe8>)
 800555c:	2244      	movs	r2, #68	; 0x44
 800555e:	4811      	ldr	r0, [pc, #68]	; (80055a4 <main+0xe0>)
 8005560:	f7ff fbc6 	bl	8004cf0 <f_write>

			  //HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);

		  }

		  f_close(&myFile);
 8005564:	480f      	ldr	r0, [pc, #60]	; (80055a4 <main+0xe0>)
 8005566:	f7ff fdd5 	bl	8005114 <f_close>
	  }
	  prev = actual;
	  HAL_Delay(100);
	  */

	  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800556a:	2201      	movs	r2, #1
 800556c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005570:	4808      	ldr	r0, [pc, #32]	; (8005594 <main+0xd0>)
 8005572:	f7fb fad5 	bl	8000b20 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8005576:	2064      	movs	r0, #100	; 0x64
 8005578:	f7fb f818 	bl	80005ac <HAL_Delay>
	  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800557c:	2200      	movs	r2, #0
 800557e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005582:	4804      	ldr	r0, [pc, #16]	; (8005594 <main+0xd0>)
 8005584:	f7fb facc 	bl	8000b20 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8005588:	2064      	movs	r0, #100	; 0x64
 800558a:	f7fb f80f 	bl	80005ac <HAL_Delay>
	  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800558e:	e7ec      	b.n	800556a <main+0xa6>
 8005590:	40020800 	.word	0x40020800
 8005594:	40020000 	.word	0x40020000
 8005598:	20000064 	.word	0x20000064
 800559c:	20003100 	.word	0x20003100
 80055a0:	08005b60 	.word	0x08005b60
 80055a4:	200020cc 	.word	0x200020cc
 80055a8:	08005b6c 	.word	0x08005b6c
 80055ac:	200030fc 	.word	0x200030fc

080055b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b094      	sub	sp, #80	; 0x50
 80055b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80055b6:	f107 0320 	add.w	r3, r7, #32
 80055ba:	2230      	movs	r2, #48	; 0x30
 80055bc:	2100      	movs	r1, #0
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fa97 	bl	8005af2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80055c4:	f107 030c 	add.w	r3, r7, #12
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	605a      	str	r2, [r3, #4]
 80055ce:	609a      	str	r2, [r3, #8]
 80055d0:	60da      	str	r2, [r3, #12]
 80055d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80055d4:	2300      	movs	r3, #0
 80055d6:	60bb      	str	r3, [r7, #8]
 80055d8:	4b27      	ldr	r3, [pc, #156]	; (8005678 <SystemClock_Config+0xc8>)
 80055da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055dc:	4a26      	ldr	r2, [pc, #152]	; (8005678 <SystemClock_Config+0xc8>)
 80055de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e2:	6413      	str	r3, [r2, #64]	; 0x40
 80055e4:	4b24      	ldr	r3, [pc, #144]	; (8005678 <SystemClock_Config+0xc8>)
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ec:	60bb      	str	r3, [r7, #8]
 80055ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80055f0:	2300      	movs	r3, #0
 80055f2:	607b      	str	r3, [r7, #4]
 80055f4:	4b21      	ldr	r3, [pc, #132]	; (800567c <SystemClock_Config+0xcc>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a20      	ldr	r2, [pc, #128]	; (800567c <SystemClock_Config+0xcc>)
 80055fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	4b1e      	ldr	r3, [pc, #120]	; (800567c <SystemClock_Config+0xcc>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005608:	607b      	str	r3, [r7, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800560c:	2301      	movs	r3, #1
 800560e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005610:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005616:	2302      	movs	r3, #2
 8005618:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800561a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8005620:	2306      	movs	r3, #6
 8005622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8005624:	2348      	movs	r3, #72	; 0x48
 8005626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005628:	2302      	movs	r3, #2
 800562a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800562c:	2303      	movs	r3, #3
 800562e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005630:	f107 0320 	add.w	r3, r7, #32
 8005634:	4618      	mov	r0, r3
 8005636:	f7fb fa8d 	bl	8000b54 <HAL_RCC_OscConfig>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005640:	f000 f81e 	bl	8005680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005644:	230f      	movs	r3, #15
 8005646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005648:	2302      	movs	r3, #2
 800564a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800564c:	2300      	movs	r3, #0
 800564e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005654:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005656:	2300      	movs	r3, #0
 8005658:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800565a:	f107 030c 	add.w	r3, r7, #12
 800565e:	2102      	movs	r1, #2
 8005660:	4618      	mov	r0, r3
 8005662:	f7fb fce7 	bl	8001034 <HAL_RCC_ClockConfig>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800566c:	f000 f808 	bl	8005680 <Error_Handler>
  }
}
 8005670:	bf00      	nop
 8005672:	3750      	adds	r7, #80	; 0x50
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40023800 	.word	0x40023800
 800567c:	40007000 	.word	0x40007000

08005680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005684:	bf00      	nop
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
	...

08005690 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800569a:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <SD_CheckStatus+0x38>)
 800569c:	2201      	movs	r2, #1
 800569e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80056a0:	f7ff fe12 	bl	80052c8 <BSP_SD_GetCardState>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d107      	bne.n	80056ba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80056aa:	4b07      	ldr	r3, [pc, #28]	; (80056c8 <SD_CheckStatus+0x38>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	f023 0301 	bic.w	r3, r3, #1
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	4b04      	ldr	r3, [pc, #16]	; (80056c8 <SD_CheckStatus+0x38>)
 80056b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80056ba:	4b03      	ldr	r3, [pc, #12]	; (80056c8 <SD_CheckStatus+0x38>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	b2db      	uxtb	r3, r3
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	20000005 	.word	0x20000005

080056cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 80056d6:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <SD_initialize+0x38>)
 80056d8:	2201      	movs	r2, #1
 80056da:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80056dc:	f7ff fda0 	bl	8005220 <BSP_SD_Init>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d107      	bne.n	80056f6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80056e6:	79fb      	ldrb	r3, [r7, #7]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7ff ffd1 	bl	8005690 <SD_CheckStatus>
 80056ee:	4603      	mov	r3, r0
 80056f0:	461a      	mov	r2, r3
 80056f2:	4b04      	ldr	r3, [pc, #16]	; (8005704 <SD_initialize+0x38>)
 80056f4:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80056f6:	4b03      	ldr	r3, [pc, #12]	; (8005704 <SD_initialize+0x38>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	b2db      	uxtb	r3, r3
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	20000005 	.word	0x20000005

08005708 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	4603      	mov	r3, r0
 8005710:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff ffbb 	bl	8005690 <SD_CheckStatus>
 800571a:	4603      	mov	r3, r0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	60b9      	str	r1, [r7, #8]
 800572c:	607a      	str	r2, [r7, #4]
 800572e:	603b      	str	r3, [r7, #0]
 8005730:	4603      	mov	r3, r0
 8005732:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005738:	f04f 33ff 	mov.w	r3, #4294967295
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	68b8      	ldr	r0, [r7, #8]
 8005742:	f7ff fd85 	bl	8005250 <BSP_SD_ReadBlocks>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d107      	bne.n	800575c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800574c:	bf00      	nop
 800574e:	f7ff fdbb 	bl	80052c8 <BSP_SD_GetCardState>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1fa      	bne.n	800574e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800575c:	7dfb      	ldrb	r3, [r7, #23]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b086      	sub	sp, #24
 800576a:	af00      	add	r7, sp, #0
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	603b      	str	r3, [r7, #0]
 8005772:	4603      	mov	r3, r0
 8005774:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800577a:	f04f 33ff 	mov.w	r3, #4294967295
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	68b8      	ldr	r0, [r7, #8]
 8005784:	f7ff fd82 	bl	800528c <BSP_SD_WriteBlocks>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d107      	bne.n	800579e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800578e:	bf00      	nop
 8005790:	f7ff fd9a 	bl	80052c8 <BSP_SD_GetCardState>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1fa      	bne.n	8005790 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08c      	sub	sp, #48	; 0x30
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	603a      	str	r2, [r7, #0]
 80057b2:	71fb      	strb	r3, [r7, #7]
 80057b4:	460b      	mov	r3, r1
 80057b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80057be:	4b25      	ldr	r3, [pc, #148]	; (8005854 <SD_ioctl+0xac>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <SD_ioctl+0x28>
 80057cc:	2303      	movs	r3, #3
 80057ce:	e03c      	b.n	800584a <SD_ioctl+0xa2>

  switch (cmd)
 80057d0:	79bb      	ldrb	r3, [r7, #6]
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d834      	bhi.n	8005840 <SD_ioctl+0x98>
 80057d6:	a201      	add	r2, pc, #4	; (adr r2, 80057dc <SD_ioctl+0x34>)
 80057d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057dc:	080057ed 	.word	0x080057ed
 80057e0:	080057f5 	.word	0x080057f5
 80057e4:	0800580d 	.word	0x0800580d
 80057e8:	08005827 	.word	0x08005827
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80057ec:	2300      	movs	r3, #0
 80057ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80057f2:	e028      	b.n	8005846 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80057f4:	f107 030c 	add.w	r3, r7, #12
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff fd75 	bl	80052e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80057fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800580a:	e01c      	b.n	8005846 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800580c:	f107 030c 	add.w	r3, r7, #12
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff fd69 	bl	80052e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	b29a      	uxth	r2, r3
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005824:	e00f      	b.n	8005846 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005826:	f107 030c 	add.w	r3, r7, #12
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff fd5c 	bl	80052e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	0a5a      	lsrs	r2, r3, #9
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800583e:	e002      	b.n	8005846 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005840:	2304      	movs	r3, #4
 8005842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005846:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800584a:	4618      	mov	r0, r3
 800584c:	3730      	adds	r7, #48	; 0x30
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20000005 	.word	0x20000005

08005858 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 800585c:	4b0c      	ldr	r3, [pc, #48]	; (8005890 <MX_SDIO_SD_Init+0x38>)
 800585e:	4a0d      	ldr	r2, [pc, #52]	; (8005894 <MX_SDIO_SD_Init+0x3c>)
 8005860:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8005862:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <MX_SDIO_SD_Init+0x38>)
 8005864:	2200      	movs	r2, #0
 8005866:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005868:	4b09      	ldr	r3, [pc, #36]	; (8005890 <MX_SDIO_SD_Init+0x38>)
 800586a:	2200      	movs	r2, #0
 800586c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800586e:	4b08      	ldr	r3, [pc, #32]	; (8005890 <MX_SDIO_SD_Init+0x38>)
 8005870:	2200      	movs	r2, #0
 8005872:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005874:	4b06      	ldr	r3, [pc, #24]	; (8005890 <MX_SDIO_SD_Init+0x38>)
 8005876:	2200      	movs	r2, #0
 8005878:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800587a:	4b05      	ldr	r3, [pc, #20]	; (8005890 <MX_SDIO_SD_Init+0x38>)
 800587c:	2200      	movs	r2, #0
 800587e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8005880:	4b03      	ldr	r3, [pc, #12]	; (8005890 <MX_SDIO_SD_Init+0x38>)
 8005882:	2203      	movs	r2, #3
 8005884:	619a      	str	r2, [r3, #24]

}
 8005886:	bf00      	nop
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	20004134 	.word	0x20004134
 8005894:	40012c00 	.word	0x40012c00

08005898 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08a      	sub	sp, #40	; 0x28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058a0:	f107 0314 	add.w	r3, r7, #20
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	605a      	str	r2, [r3, #4]
 80058aa:	609a      	str	r2, [r3, #8]
 80058ac:	60da      	str	r2, [r3, #12]
 80058ae:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a28      	ldr	r2, [pc, #160]	; (8005958 <HAL_SD_MspInit+0xc0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d14a      	bne.n	8005950 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80058ba:	2300      	movs	r3, #0
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	4b27      	ldr	r3, [pc, #156]	; (800595c <HAL_SD_MspInit+0xc4>)
 80058c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c2:	4a26      	ldr	r2, [pc, #152]	; (800595c <HAL_SD_MspInit+0xc4>)
 80058c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80058c8:	6453      	str	r3, [r2, #68]	; 0x44
 80058ca:	4b24      	ldr	r3, [pc, #144]	; (800595c <HAL_SD_MspInit+0xc4>)
 80058cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	4b20      	ldr	r3, [pc, #128]	; (800595c <HAL_SD_MspInit+0xc4>)
 80058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058de:	4a1f      	ldr	r2, [pc, #124]	; (800595c <HAL_SD_MspInit+0xc4>)
 80058e0:	f043 0304 	orr.w	r3, r3, #4
 80058e4:	6313      	str	r3, [r2, #48]	; 0x30
 80058e6:	4b1d      	ldr	r3, [pc, #116]	; (800595c <HAL_SD_MspInit+0xc4>)
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	f003 0304 	and.w	r3, r3, #4
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80058f2:	2300      	movs	r3, #0
 80058f4:	60bb      	str	r3, [r7, #8]
 80058f6:	4b19      	ldr	r3, [pc, #100]	; (800595c <HAL_SD_MspInit+0xc4>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	4a18      	ldr	r2, [pc, #96]	; (800595c <HAL_SD_MspInit+0xc4>)
 80058fc:	f043 0308 	orr.w	r3, r3, #8
 8005900:	6313      	str	r3, [r2, #48]	; 0x30
 8005902:	4b16      	ldr	r3, [pc, #88]	; (800595c <HAL_SD_MspInit+0xc4>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	60bb      	str	r3, [r7, #8]
 800590c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration    
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800590e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8005912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005914:	2302      	movs	r3, #2
 8005916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005918:	2300      	movs	r3, #0
 800591a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800591c:	2303      	movs	r3, #3
 800591e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005920:	230c      	movs	r3, #12
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005924:	f107 0314 	add.w	r3, r7, #20
 8005928:	4619      	mov	r1, r3
 800592a:	480d      	ldr	r0, [pc, #52]	; (8005960 <HAL_SD_MspInit+0xc8>)
 800592c:	f7fa ff46 	bl	80007bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005930:	2304      	movs	r3, #4
 8005932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005934:	2302      	movs	r3, #2
 8005936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005938:	2300      	movs	r3, #0
 800593a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800593c:	2303      	movs	r3, #3
 800593e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005940:	230c      	movs	r3, #12
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005944:	f107 0314 	add.w	r3, r7, #20
 8005948:	4619      	mov	r1, r3
 800594a:	4806      	ldr	r0, [pc, #24]	; (8005964 <HAL_SD_MspInit+0xcc>)
 800594c:	f7fa ff36 	bl	80007bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8005950:	bf00      	nop
 8005952:	3728      	adds	r7, #40	; 0x28
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40012c00 	.word	0x40012c00
 800595c:	40023800 	.word	0x40023800
 8005960:	40020800 	.word	0x40020800
 8005964:	40020c00 	.word	0x40020c00

08005968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800596e:	2300      	movs	r3, #0
 8005970:	607b      	str	r3, [r7, #4]
 8005972:	4b10      	ldr	r3, [pc, #64]	; (80059b4 <HAL_MspInit+0x4c>)
 8005974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005976:	4a0f      	ldr	r2, [pc, #60]	; (80059b4 <HAL_MspInit+0x4c>)
 8005978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800597c:	6453      	str	r3, [r2, #68]	; 0x44
 800597e:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <HAL_MspInit+0x4c>)
 8005980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005986:	607b      	str	r3, [r7, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800598a:	2300      	movs	r3, #0
 800598c:	603b      	str	r3, [r7, #0]
 800598e:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <HAL_MspInit+0x4c>)
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	4a08      	ldr	r2, [pc, #32]	; (80059b4 <HAL_MspInit+0x4c>)
 8005994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005998:	6413      	str	r3, [r2, #64]	; 0x40
 800599a:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <HAL_MspInit+0x4c>)
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40023800 	.word	0x40023800

080059b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059b8:	b480      	push	{r7}
 80059ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80059bc:	bf00      	nop
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059c6:	b480      	push	{r7}
 80059c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059ca:	e7fe      	b.n	80059ca <HardFault_Handler+0x4>

080059cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059d0:	e7fe      	b.n	80059d0 <MemManage_Handler+0x4>

080059d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059d2:	b480      	push	{r7}
 80059d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059d6:	e7fe      	b.n	80059d6 <BusFault_Handler+0x4>

080059d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059dc:	e7fe      	b.n	80059dc <UsageFault_Handler+0x4>

080059de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059de:	b480      	push	{r7}
 80059e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80059e2:	bf00      	nop
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059f0:	bf00      	nop
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80059fa:	b480      	push	{r7}
 80059fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059fe:	bf00      	nop
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a0c:	f7fa fdae 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a10:	bf00      	nop
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a18:	4b08      	ldr	r3, [pc, #32]	; (8005a3c <SystemInit+0x28>)
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1e:	4a07      	ldr	r2, [pc, #28]	; (8005a3c <SystemInit+0x28>)
 8005a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005a28:	4b04      	ldr	r3, [pc, #16]	; (8005a3c <SystemInit+0x28>)
 8005a2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a2e:	609a      	str	r2, [r3, #8]
#endif
}
 8005a30:	bf00      	nop
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	e000ed00 	.word	0xe000ed00

08005a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005a44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005a46:	e003      	b.n	8005a50 <LoopCopyDataInit>

08005a48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005a4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005a4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005a4e:	3104      	adds	r1, #4

08005a50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005a50:	480b      	ldr	r0, [pc, #44]	; (8005a80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005a52:	4b0c      	ldr	r3, [pc, #48]	; (8005a84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005a54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005a56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005a58:	d3f6      	bcc.n	8005a48 <CopyDataInit>
  ldr  r2, =_sbss
 8005a5a:	4a0b      	ldr	r2, [pc, #44]	; (8005a88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005a5c:	e002      	b.n	8005a64 <LoopFillZerobss>

08005a5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005a5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005a60:	f842 3b04 	str.w	r3, [r2], #4

08005a64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005a64:	4b09      	ldr	r3, [pc, #36]	; (8005a8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005a66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005a68:	d3f9      	bcc.n	8005a5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005a6a:	f7ff ffd3 	bl	8005a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a6e:	f000 f811 	bl	8005a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a72:	f7ff fd27 	bl	80054c4 <main>
  bx  lr    
 8005a76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005a78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005a7c:	08005c64 	.word	0x08005c64
  ldr  r0, =_sdata
 8005a80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005a84:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8005a88:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8005a8c:	200041b8 	.word	0x200041b8

08005a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a90:	e7fe      	b.n	8005a90 <ADC_IRQHandler>
	...

08005a94 <__libc_init_array>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	4e0d      	ldr	r6, [pc, #52]	; (8005acc <__libc_init_array+0x38>)
 8005a98:	4c0d      	ldr	r4, [pc, #52]	; (8005ad0 <__libc_init_array+0x3c>)
 8005a9a:	1ba4      	subs	r4, r4, r6
 8005a9c:	10a4      	asrs	r4, r4, #2
 8005a9e:	2500      	movs	r5, #0
 8005aa0:	42a5      	cmp	r5, r4
 8005aa2:	d109      	bne.n	8005ab8 <__libc_init_array+0x24>
 8005aa4:	4e0b      	ldr	r6, [pc, #44]	; (8005ad4 <__libc_init_array+0x40>)
 8005aa6:	4c0c      	ldr	r4, [pc, #48]	; (8005ad8 <__libc_init_array+0x44>)
 8005aa8:	f000 f82c 	bl	8005b04 <_init>
 8005aac:	1ba4      	subs	r4, r4, r6
 8005aae:	10a4      	asrs	r4, r4, #2
 8005ab0:	2500      	movs	r5, #0
 8005ab2:	42a5      	cmp	r5, r4
 8005ab4:	d105      	bne.n	8005ac2 <__libc_init_array+0x2e>
 8005ab6:	bd70      	pop	{r4, r5, r6, pc}
 8005ab8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005abc:	4798      	blx	r3
 8005abe:	3501      	adds	r5, #1
 8005ac0:	e7ee      	b.n	8005aa0 <__libc_init_array+0xc>
 8005ac2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ac6:	4798      	blx	r3
 8005ac8:	3501      	adds	r5, #1
 8005aca:	e7f2      	b.n	8005ab2 <__libc_init_array+0x1e>
 8005acc:	08005c5c 	.word	0x08005c5c
 8005ad0:	08005c5c 	.word	0x08005c5c
 8005ad4:	08005c5c 	.word	0x08005c5c
 8005ad8:	08005c60 	.word	0x08005c60

08005adc <memcpy>:
 8005adc:	b510      	push	{r4, lr}
 8005ade:	1e43      	subs	r3, r0, #1
 8005ae0:	440a      	add	r2, r1
 8005ae2:	4291      	cmp	r1, r2
 8005ae4:	d100      	bne.n	8005ae8 <memcpy+0xc>
 8005ae6:	bd10      	pop	{r4, pc}
 8005ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005af0:	e7f7      	b.n	8005ae2 <memcpy+0x6>

08005af2 <memset>:
 8005af2:	4402      	add	r2, r0
 8005af4:	4603      	mov	r3, r0
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d100      	bne.n	8005afc <memset+0xa>
 8005afa:	4770      	bx	lr
 8005afc:	f803 1b01 	strb.w	r1, [r3], #1
 8005b00:	e7f9      	b.n	8005af6 <memset+0x4>
	...

08005b04 <_init>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	bf00      	nop
 8005b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0a:	bc08      	pop	{r3}
 8005b0c:	469e      	mov	lr, r3
 8005b0e:	4770      	bx	lr

08005b10 <_fini>:
 8005b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b12:	bf00      	nop
 8005b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b16:	bc08      	pop	{r3}
 8005b18:	469e      	mov	lr, r3
 8005b1a:	4770      	bx	lr
